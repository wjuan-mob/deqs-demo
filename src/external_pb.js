// source: external.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.external.AccountKey', null, global);
goog.exportSymbol('proto.external.Amount', null, global);
goog.exportSymbol('proto.external.CompressedRistretto', null, global);
goog.exportSymbol('proto.external.CurveScalar', null, global);
goog.exportSymbol('proto.external.Ed25519MultiSig', null, global);
goog.exportSymbol('proto.external.Ed25519Public', null, global);
goog.exportSymbol('proto.external.Ed25519Signature', null, global);
goog.exportSymbol('proto.external.Ed25519SignerSet', null, global);
goog.exportSymbol('proto.external.EncryptedFogHint', null, global);
goog.exportSymbol('proto.external.EncryptedMemo', null, global);
goog.exportSymbol('proto.external.InputRing', null, global);
goog.exportSymbol('proto.external.InputRing.RingCase', null, global);
goog.exportSymbol('proto.external.InputRules', null, global);
goog.exportSymbol('proto.external.InputSecret', null, global);
goog.exportSymbol('proto.external.InputSecret.OnetimeKeyDeriveDataCase', null, global);
goog.exportSymbol('proto.external.KeyImage', null, global);
goog.exportSymbol('proto.external.KnownTokenId', null, global);
goog.exportSymbol('proto.external.MaskedAmount', null, global);
goog.exportSymbol('proto.external.MintConfig', null, global);
goog.exportSymbol('proto.external.MintConfigTx', null, global);
goog.exportSymbol('proto.external.MintConfigTxPrefix', null, global);
goog.exportSymbol('proto.external.MintTx', null, global);
goog.exportSymbol('proto.external.MintTxPrefix', null, global);
goog.exportSymbol('proto.external.OutputSecret', null, global);
goog.exportSymbol('proto.external.PresignedInputRing', null, global);
goog.exportSymbol('proto.external.PublicAddress', null, global);
goog.exportSymbol('proto.external.Range', null, global);
goog.exportSymbol('proto.external.Receipt', null, global);
goog.exportSymbol('proto.external.Receipt.MaskedAmountCase', null, global);
goog.exportSymbol('proto.external.ReducedTxOut', null, global);
goog.exportSymbol('proto.external.RevealedTxOut', null, global);
goog.exportSymbol('proto.external.RingMLSAG', null, global);
goog.exportSymbol('proto.external.RistrettoPrivate', null, global);
goog.exportSymbol('proto.external.RootEntropy', null, global);
goog.exportSymbol('proto.external.RootIdentity', null, global);
goog.exportSymbol('proto.external.SignableInputRing', null, global);
goog.exportSymbol('proto.external.SignatureRctBulletproofs', null, global);
goog.exportSymbol('proto.external.SignedContingentInput', null, global);
goog.exportSymbol('proto.external.SigningData', null, global);
goog.exportSymbol('proto.external.Tx', null, global);
goog.exportSymbol('proto.external.TxHash', null, global);
goog.exportSymbol('proto.external.TxIn', null, global);
goog.exportSymbol('proto.external.TxOut', null, global);
goog.exportSymbol('proto.external.TxOut.MaskedAmountCase', null, global);
goog.exportSymbol('proto.external.TxOutConfirmationNumber', null, global);
goog.exportSymbol('proto.external.TxOutMembershipElement', null, global);
goog.exportSymbol('proto.external.TxOutMembershipHash', null, global);
goog.exportSymbol('proto.external.TxOutMembershipProof', null, global);
goog.exportSymbol('proto.external.TxOutSummaryUnblindingData', null, global);
goog.exportSymbol('proto.external.TxPrefix', null, global);
goog.exportSymbol('proto.external.UnmaskedAmount', null, global);
goog.exportSymbol('proto.external.UnsignedTx', null, global);
goog.exportSymbol('proto.external.ValidatedMintConfigTx', null, global);
goog.exportSymbol('proto.external.VerificationReport', null, global);
goog.exportSymbol('proto.external.VerificationSignature', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.RistrettoPrivate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.external.RistrettoPrivate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.RistrettoPrivate.displayName = 'proto.external.RistrettoPrivate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.CompressedRistretto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.external.CompressedRistretto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.CompressedRistretto.displayName = 'proto.external.CompressedRistretto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.Ed25519Public = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.external.Ed25519Public, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.Ed25519Public.displayName = 'proto.external.Ed25519Public';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.Ed25519Signature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.external.Ed25519Signature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.Ed25519Signature.displayName = 'proto.external.Ed25519Signature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.Ed25519MultiSig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.external.Ed25519MultiSig.repeatedFields_, null);
};
goog.inherits(proto.external.Ed25519MultiSig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.Ed25519MultiSig.displayName = 'proto.external.Ed25519MultiSig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.Ed25519SignerSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.external.Ed25519SignerSet.repeatedFields_, null);
};
goog.inherits(proto.external.Ed25519SignerSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.Ed25519SignerSet.displayName = 'proto.external.Ed25519SignerSet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.AccountKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.external.AccountKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.AccountKey.displayName = 'proto.external.AccountKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.PublicAddress = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.external.PublicAddress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.PublicAddress.displayName = 'proto.external.PublicAddress';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.RootIdentity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.external.RootIdentity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.RootIdentity.displayName = 'proto.external.RootIdentity';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.RootEntropy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.external.RootEntropy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.RootEntropy.displayName = 'proto.external.RootEntropy';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.CurveScalar = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.external.CurveScalar, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.CurveScalar.displayName = 'proto.external.CurveScalar';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.KeyImage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.external.KeyImage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.KeyImage.displayName = 'proto.external.KeyImage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.Range = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.external.Range, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.Range.displayName = 'proto.external.Range';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.TxOutMembershipHash = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.external.TxOutMembershipHash, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.TxOutMembershipHash.displayName = 'proto.external.TxOutMembershipHash';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.TxOutMembershipElement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.external.TxOutMembershipElement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.TxOutMembershipElement.displayName = 'proto.external.TxOutMembershipElement';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.TxOutMembershipProof = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.external.TxOutMembershipProof.repeatedFields_, null);
};
goog.inherits(proto.external.TxOutMembershipProof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.TxOutMembershipProof.displayName = 'proto.external.TxOutMembershipProof';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.TxOutConfirmationNumber = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.external.TxOutConfirmationNumber, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.TxOutConfirmationNumber.displayName = 'proto.external.TxOutConfirmationNumber';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.MaskedAmount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.external.MaskedAmount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.MaskedAmount.displayName = 'proto.external.MaskedAmount';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.EncryptedFogHint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.external.EncryptedFogHint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.EncryptedFogHint.displayName = 'proto.external.EncryptedFogHint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.EncryptedMemo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.external.EncryptedMemo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.EncryptedMemo.displayName = 'proto.external.EncryptedMemo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.TxOut = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.external.TxOut.oneofGroups_);
};
goog.inherits(proto.external.TxOut, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.TxOut.displayName = 'proto.external.TxOut';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.TxIn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.external.TxIn.repeatedFields_, null);
};
goog.inherits(proto.external.TxIn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.TxIn.displayName = 'proto.external.TxIn';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.InputRules = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.external.InputRules.repeatedFields_, null);
};
goog.inherits(proto.external.InputRules, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.InputRules.displayName = 'proto.external.InputRules';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.RevealedTxOut = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.external.RevealedTxOut, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.RevealedTxOut.displayName = 'proto.external.RevealedTxOut';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.TxPrefix = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.external.TxPrefix.repeatedFields_, null);
};
goog.inherits(proto.external.TxPrefix, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.TxPrefix.displayName = 'proto.external.TxPrefix';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.RingMLSAG = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.external.RingMLSAG.repeatedFields_, null);
};
goog.inherits(proto.external.RingMLSAG, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.RingMLSAG.displayName = 'proto.external.RingMLSAG';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.SignatureRctBulletproofs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.external.SignatureRctBulletproofs.repeatedFields_, null);
};
goog.inherits(proto.external.SignatureRctBulletproofs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.SignatureRctBulletproofs.displayName = 'proto.external.SignatureRctBulletproofs';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.Tx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.external.Tx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.Tx.displayName = 'proto.external.Tx';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.TxHash = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.external.TxHash, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.TxHash.displayName = 'proto.external.TxHash';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.Receipt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.external.Receipt.oneofGroups_);
};
goog.inherits(proto.external.Receipt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.Receipt.displayName = 'proto.external.Receipt';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.VerificationSignature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.external.VerificationSignature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.VerificationSignature.displayName = 'proto.external.VerificationSignature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.VerificationReport = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.external.VerificationReport.repeatedFields_, null);
};
goog.inherits(proto.external.VerificationReport, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.VerificationReport.displayName = 'proto.external.VerificationReport';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.MintTxPrefix = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.external.MintTxPrefix, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.MintTxPrefix.displayName = 'proto.external.MintTxPrefix';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.MintTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.external.MintTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.MintTx.displayName = 'proto.external.MintTx';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.MintConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.external.MintConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.MintConfig.displayName = 'proto.external.MintConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.MintConfigTxPrefix = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.external.MintConfigTxPrefix.repeatedFields_, null);
};
goog.inherits(proto.external.MintConfigTxPrefix, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.MintConfigTxPrefix.displayName = 'proto.external.MintConfigTxPrefix';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.MintConfigTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.external.MintConfigTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.MintConfigTx.displayName = 'proto.external.MintConfigTx';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.ValidatedMintConfigTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.external.ValidatedMintConfigTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.ValidatedMintConfigTx.displayName = 'proto.external.ValidatedMintConfigTx';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.UnmaskedAmount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.external.UnmaskedAmount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.UnmaskedAmount.displayName = 'proto.external.UnmaskedAmount';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.SignedContingentInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.external.SignedContingentInput.repeatedFields_, null);
};
goog.inherits(proto.external.SignedContingentInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.SignedContingentInput.displayName = 'proto.external.SignedContingentInput';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.Amount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.external.Amount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.Amount.displayName = 'proto.external.Amount';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.OutputSecret = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.external.OutputSecret, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.OutputSecret.displayName = 'proto.external.OutputSecret';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.InputSecret = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.external.InputSecret.oneofGroups_);
};
goog.inherits(proto.external.InputSecret, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.InputSecret.displayName = 'proto.external.InputSecret';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.ReducedTxOut = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.external.ReducedTxOut, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.ReducedTxOut.displayName = 'proto.external.ReducedTxOut';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.SignableInputRing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.external.SignableInputRing.repeatedFields_, null);
};
goog.inherits(proto.external.SignableInputRing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.SignableInputRing.displayName = 'proto.external.SignableInputRing';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.PresignedInputRing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.external.PresignedInputRing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.PresignedInputRing.displayName = 'proto.external.PresignedInputRing';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.InputRing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.external.InputRing.oneofGroups_);
};
goog.inherits(proto.external.InputRing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.InputRing.displayName = 'proto.external.InputRing';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.UnsignedTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.external.UnsignedTx.repeatedFields_, null);
};
goog.inherits(proto.external.UnsignedTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.UnsignedTx.displayName = 'proto.external.UnsignedTx';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.TxOutSummaryUnblindingData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.external.TxOutSummaryUnblindingData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.TxOutSummaryUnblindingData.displayName = 'proto.external.TxOutSummaryUnblindingData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.external.SigningData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.external.SigningData.repeatedFields_, null);
};
goog.inherits(proto.external.SigningData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.external.SigningData.displayName = 'proto.external.SigningData';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.external.RistrettoPrivate.prototype.toObject = function(opt_includeInstance) {
  return proto.external.RistrettoPrivate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.external.RistrettoPrivate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.RistrettoPrivate.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.RistrettoPrivate}
 */
proto.external.RistrettoPrivate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.external.RistrettoPrivate;
  return proto.external.RistrettoPrivate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.RistrettoPrivate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.RistrettoPrivate}
 */
proto.external.RistrettoPrivate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.RistrettoPrivate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.external.RistrettoPrivate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.RistrettoPrivate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.RistrettoPrivate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.external.RistrettoPrivate.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.external.RistrettoPrivate.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.external.RistrettoPrivate.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.external.RistrettoPrivate} returns this
 */
proto.external.RistrettoPrivate.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.external.CompressedRistretto.prototype.toObject = function(opt_includeInstance) {
  return proto.external.CompressedRistretto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.external.CompressedRistretto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.CompressedRistretto.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.CompressedRistretto}
 */
proto.external.CompressedRistretto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.external.CompressedRistretto;
  return proto.external.CompressedRistretto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.CompressedRistretto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.CompressedRistretto}
 */
proto.external.CompressedRistretto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.CompressedRistretto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.external.CompressedRistretto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.CompressedRistretto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.CompressedRistretto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.external.CompressedRistretto.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.external.CompressedRistretto.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.external.CompressedRistretto.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.external.CompressedRistretto} returns this
 */
proto.external.CompressedRistretto.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.external.Ed25519Public.prototype.toObject = function(opt_includeInstance) {
  return proto.external.Ed25519Public.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.external.Ed25519Public} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.Ed25519Public.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.Ed25519Public}
 */
proto.external.Ed25519Public.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.external.Ed25519Public;
  return proto.external.Ed25519Public.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.Ed25519Public} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.Ed25519Public}
 */
proto.external.Ed25519Public.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.Ed25519Public.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.external.Ed25519Public.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.Ed25519Public} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.Ed25519Public.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.external.Ed25519Public.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.external.Ed25519Public.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.external.Ed25519Public.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.external.Ed25519Public} returns this
 */
proto.external.Ed25519Public.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.external.Ed25519Signature.prototype.toObject = function(opt_includeInstance) {
  return proto.external.Ed25519Signature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.external.Ed25519Signature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.Ed25519Signature.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.Ed25519Signature}
 */
proto.external.Ed25519Signature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.external.Ed25519Signature;
  return proto.external.Ed25519Signature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.Ed25519Signature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.Ed25519Signature}
 */
proto.external.Ed25519Signature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.Ed25519Signature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.external.Ed25519Signature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.Ed25519Signature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.Ed25519Signature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.external.Ed25519Signature.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.external.Ed25519Signature.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.external.Ed25519Signature.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.external.Ed25519Signature} returns this
 */
proto.external.Ed25519Signature.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.external.Ed25519MultiSig.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.external.Ed25519MultiSig.prototype.toObject = function(opt_includeInstance) {
  return proto.external.Ed25519MultiSig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.external.Ed25519MultiSig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.Ed25519MultiSig.toObject = function(includeInstance, msg) {
  var f, obj = {
    signaturesList: jspb.Message.toObjectList(msg.getSignaturesList(),
    proto.external.Ed25519Signature.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.Ed25519MultiSig}
 */
proto.external.Ed25519MultiSig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.external.Ed25519MultiSig;
  return proto.external.Ed25519MultiSig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.Ed25519MultiSig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.Ed25519MultiSig}
 */
proto.external.Ed25519MultiSig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.external.Ed25519Signature;
      reader.readMessage(value,proto.external.Ed25519Signature.deserializeBinaryFromReader);
      msg.addSignatures(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.Ed25519MultiSig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.external.Ed25519MultiSig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.Ed25519MultiSig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.Ed25519MultiSig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignaturesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.external.Ed25519Signature.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Ed25519Signature signatures = 1;
 * @return {!Array<!proto.external.Ed25519Signature>}
 */
proto.external.Ed25519MultiSig.prototype.getSignaturesList = function() {
  return /** @type{!Array<!proto.external.Ed25519Signature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.external.Ed25519Signature, 1));
};


/**
 * @param {!Array<!proto.external.Ed25519Signature>} value
 * @return {!proto.external.Ed25519MultiSig} returns this
*/
proto.external.Ed25519MultiSig.prototype.setSignaturesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.external.Ed25519Signature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.external.Ed25519Signature}
 */
proto.external.Ed25519MultiSig.prototype.addSignatures = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.external.Ed25519Signature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.external.Ed25519MultiSig} returns this
 */
proto.external.Ed25519MultiSig.prototype.clearSignaturesList = function() {
  return this.setSignaturesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.external.Ed25519SignerSet.repeatedFields_ = [1,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.external.Ed25519SignerSet.prototype.toObject = function(opt_includeInstance) {
  return proto.external.Ed25519SignerSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.external.Ed25519SignerSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.Ed25519SignerSet.toObject = function(includeInstance, msg) {
  var f, obj = {
    individualSignersList: jspb.Message.toObjectList(msg.getIndividualSignersList(),
    proto.external.Ed25519Public.toObject, includeInstance),
    multiSignersList: jspb.Message.toObjectList(msg.getMultiSignersList(),
    proto.external.Ed25519SignerSet.toObject, includeInstance),
    threshold: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.Ed25519SignerSet}
 */
proto.external.Ed25519SignerSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.external.Ed25519SignerSet;
  return proto.external.Ed25519SignerSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.Ed25519SignerSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.Ed25519SignerSet}
 */
proto.external.Ed25519SignerSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.external.Ed25519Public;
      reader.readMessage(value,proto.external.Ed25519Public.deserializeBinaryFromReader);
      msg.addIndividualSigners(value);
      break;
    case 3:
      var value = new proto.external.Ed25519SignerSet;
      reader.readMessage(value,proto.external.Ed25519SignerSet.deserializeBinaryFromReader);
      msg.addMultiSigners(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setThreshold(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.Ed25519SignerSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.external.Ed25519SignerSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.Ed25519SignerSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.Ed25519SignerSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndividualSignersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.external.Ed25519Public.serializeBinaryToWriter
    );
  }
  f = message.getMultiSignersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.external.Ed25519SignerSet.serializeBinaryToWriter
    );
  }
  f = message.getThreshold();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * repeated Ed25519Public individual_signers = 1;
 * @return {!Array<!proto.external.Ed25519Public>}
 */
proto.external.Ed25519SignerSet.prototype.getIndividualSignersList = function() {
  return /** @type{!Array<!proto.external.Ed25519Public>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.external.Ed25519Public, 1));
};


/**
 * @param {!Array<!proto.external.Ed25519Public>} value
 * @return {!proto.external.Ed25519SignerSet} returns this
*/
proto.external.Ed25519SignerSet.prototype.setIndividualSignersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.external.Ed25519Public=} opt_value
 * @param {number=} opt_index
 * @return {!proto.external.Ed25519Public}
 */
proto.external.Ed25519SignerSet.prototype.addIndividualSigners = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.external.Ed25519Public, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.external.Ed25519SignerSet} returns this
 */
proto.external.Ed25519SignerSet.prototype.clearIndividualSignersList = function() {
  return this.setIndividualSignersList([]);
};


/**
 * repeated Ed25519SignerSet multi_signers = 3;
 * @return {!Array<!proto.external.Ed25519SignerSet>}
 */
proto.external.Ed25519SignerSet.prototype.getMultiSignersList = function() {
  return /** @type{!Array<!proto.external.Ed25519SignerSet>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.external.Ed25519SignerSet, 3));
};


/**
 * @param {!Array<!proto.external.Ed25519SignerSet>} value
 * @return {!proto.external.Ed25519SignerSet} returns this
*/
proto.external.Ed25519SignerSet.prototype.setMultiSignersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.external.Ed25519SignerSet=} opt_value
 * @param {number=} opt_index
 * @return {!proto.external.Ed25519SignerSet}
 */
proto.external.Ed25519SignerSet.prototype.addMultiSigners = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.external.Ed25519SignerSet, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.external.Ed25519SignerSet} returns this
 */
proto.external.Ed25519SignerSet.prototype.clearMultiSignersList = function() {
  return this.setMultiSignersList([]);
};


/**
 * optional uint32 threshold = 2;
 * @return {number}
 */
proto.external.Ed25519SignerSet.prototype.getThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.external.Ed25519SignerSet} returns this
 */
proto.external.Ed25519SignerSet.prototype.setThreshold = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.external.AccountKey.prototype.toObject = function(opt_includeInstance) {
  return proto.external.AccountKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.external.AccountKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.AccountKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    viewPrivateKey: (f = msg.getViewPrivateKey()) && proto.external.RistrettoPrivate.toObject(includeInstance, f),
    spendPrivateKey: (f = msg.getSpendPrivateKey()) && proto.external.RistrettoPrivate.toObject(includeInstance, f),
    fogReportUrl: jspb.Message.getFieldWithDefault(msg, 3, ""),
    fogReportId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    fogAuthoritySpki: msg.getFogAuthoritySpki_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.AccountKey}
 */
proto.external.AccountKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.external.AccountKey;
  return proto.external.AccountKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.AccountKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.AccountKey}
 */
proto.external.AccountKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.external.RistrettoPrivate;
      reader.readMessage(value,proto.external.RistrettoPrivate.deserializeBinaryFromReader);
      msg.setViewPrivateKey(value);
      break;
    case 2:
      var value = new proto.external.RistrettoPrivate;
      reader.readMessage(value,proto.external.RistrettoPrivate.deserializeBinaryFromReader);
      msg.setSpendPrivateKey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFogReportUrl(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFogReportId(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFogAuthoritySpki(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.AccountKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.external.AccountKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.AccountKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.AccountKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getViewPrivateKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.external.RistrettoPrivate.serializeBinaryToWriter
    );
  }
  f = message.getSpendPrivateKey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.external.RistrettoPrivate.serializeBinaryToWriter
    );
  }
  f = message.getFogReportUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFogReportId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getFogAuthoritySpki_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional RistrettoPrivate view_private_key = 1;
 * @return {?proto.external.RistrettoPrivate}
 */
proto.external.AccountKey.prototype.getViewPrivateKey = function() {
  return /** @type{?proto.external.RistrettoPrivate} */ (
    jspb.Message.getWrapperField(this, proto.external.RistrettoPrivate, 1));
};


/**
 * @param {?proto.external.RistrettoPrivate|undefined} value
 * @return {!proto.external.AccountKey} returns this
*/
proto.external.AccountKey.prototype.setViewPrivateKey = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.AccountKey} returns this
 */
proto.external.AccountKey.prototype.clearViewPrivateKey = function() {
  return this.setViewPrivateKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.AccountKey.prototype.hasViewPrivateKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional RistrettoPrivate spend_private_key = 2;
 * @return {?proto.external.RistrettoPrivate}
 */
proto.external.AccountKey.prototype.getSpendPrivateKey = function() {
  return /** @type{?proto.external.RistrettoPrivate} */ (
    jspb.Message.getWrapperField(this, proto.external.RistrettoPrivate, 2));
};


/**
 * @param {?proto.external.RistrettoPrivate|undefined} value
 * @return {!proto.external.AccountKey} returns this
*/
proto.external.AccountKey.prototype.setSpendPrivateKey = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.AccountKey} returns this
 */
proto.external.AccountKey.prototype.clearSpendPrivateKey = function() {
  return this.setSpendPrivateKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.AccountKey.prototype.hasSpendPrivateKey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string fog_report_url = 3;
 * @return {string}
 */
proto.external.AccountKey.prototype.getFogReportUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.external.AccountKey} returns this
 */
proto.external.AccountKey.prototype.setFogReportUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string fog_report_id = 4;
 * @return {string}
 */
proto.external.AccountKey.prototype.getFogReportId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.external.AccountKey} returns this
 */
proto.external.AccountKey.prototype.setFogReportId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bytes fog_authority_spki = 5;
 * @return {!(string|Uint8Array)}
 */
proto.external.AccountKey.prototype.getFogAuthoritySpki = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes fog_authority_spki = 5;
 * This is a type-conversion wrapper around `getFogAuthoritySpki()`
 * @return {string}
 */
proto.external.AccountKey.prototype.getFogAuthoritySpki_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFogAuthoritySpki()));
};


/**
 * optional bytes fog_authority_spki = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFogAuthoritySpki()`
 * @return {!Uint8Array}
 */
proto.external.AccountKey.prototype.getFogAuthoritySpki_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFogAuthoritySpki()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.external.AccountKey} returns this
 */
proto.external.AccountKey.prototype.setFogAuthoritySpki = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.external.PublicAddress.prototype.toObject = function(opt_includeInstance) {
  return proto.external.PublicAddress.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.external.PublicAddress} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.PublicAddress.toObject = function(includeInstance, msg) {
  var f, obj = {
    viewPublicKey: (f = msg.getViewPublicKey()) && proto.external.CompressedRistretto.toObject(includeInstance, f),
    spendPublicKey: (f = msg.getSpendPublicKey()) && proto.external.CompressedRistretto.toObject(includeInstance, f),
    fogReportUrl: jspb.Message.getFieldWithDefault(msg, 3, ""),
    fogReportId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    fogAuthoritySig: msg.getFogAuthoritySig_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.PublicAddress}
 */
proto.external.PublicAddress.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.external.PublicAddress;
  return proto.external.PublicAddress.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.PublicAddress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.PublicAddress}
 */
proto.external.PublicAddress.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.external.CompressedRistretto;
      reader.readMessage(value,proto.external.CompressedRistretto.deserializeBinaryFromReader);
      msg.setViewPublicKey(value);
      break;
    case 2:
      var value = new proto.external.CompressedRistretto;
      reader.readMessage(value,proto.external.CompressedRistretto.deserializeBinaryFromReader);
      msg.setSpendPublicKey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFogReportUrl(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFogReportId(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFogAuthoritySig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.PublicAddress.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.external.PublicAddress.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.PublicAddress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.PublicAddress.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getViewPublicKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.external.CompressedRistretto.serializeBinaryToWriter
    );
  }
  f = message.getSpendPublicKey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.external.CompressedRistretto.serializeBinaryToWriter
    );
  }
  f = message.getFogReportUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFogReportId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getFogAuthoritySig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional CompressedRistretto view_public_key = 1;
 * @return {?proto.external.CompressedRistretto}
 */
proto.external.PublicAddress.prototype.getViewPublicKey = function() {
  return /** @type{?proto.external.CompressedRistretto} */ (
    jspb.Message.getWrapperField(this, proto.external.CompressedRistretto, 1));
};


/**
 * @param {?proto.external.CompressedRistretto|undefined} value
 * @return {!proto.external.PublicAddress} returns this
*/
proto.external.PublicAddress.prototype.setViewPublicKey = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.PublicAddress} returns this
 */
proto.external.PublicAddress.prototype.clearViewPublicKey = function() {
  return this.setViewPublicKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.PublicAddress.prototype.hasViewPublicKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CompressedRistretto spend_public_key = 2;
 * @return {?proto.external.CompressedRistretto}
 */
proto.external.PublicAddress.prototype.getSpendPublicKey = function() {
  return /** @type{?proto.external.CompressedRistretto} */ (
    jspb.Message.getWrapperField(this, proto.external.CompressedRistretto, 2));
};


/**
 * @param {?proto.external.CompressedRistretto|undefined} value
 * @return {!proto.external.PublicAddress} returns this
*/
proto.external.PublicAddress.prototype.setSpendPublicKey = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.PublicAddress} returns this
 */
proto.external.PublicAddress.prototype.clearSpendPublicKey = function() {
  return this.setSpendPublicKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.PublicAddress.prototype.hasSpendPublicKey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string fog_report_url = 3;
 * @return {string}
 */
proto.external.PublicAddress.prototype.getFogReportUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.external.PublicAddress} returns this
 */
proto.external.PublicAddress.prototype.setFogReportUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string fog_report_id = 4;
 * @return {string}
 */
proto.external.PublicAddress.prototype.getFogReportId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.external.PublicAddress} returns this
 */
proto.external.PublicAddress.prototype.setFogReportId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bytes fog_authority_sig = 5;
 * @return {!(string|Uint8Array)}
 */
proto.external.PublicAddress.prototype.getFogAuthoritySig = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes fog_authority_sig = 5;
 * This is a type-conversion wrapper around `getFogAuthoritySig()`
 * @return {string}
 */
proto.external.PublicAddress.prototype.getFogAuthoritySig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFogAuthoritySig()));
};


/**
 * optional bytes fog_authority_sig = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFogAuthoritySig()`
 * @return {!Uint8Array}
 */
proto.external.PublicAddress.prototype.getFogAuthoritySig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFogAuthoritySig()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.external.PublicAddress} returns this
 */
proto.external.PublicAddress.prototype.setFogAuthoritySig = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.external.RootIdentity.prototype.toObject = function(opt_includeInstance) {
  return proto.external.RootIdentity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.external.RootIdentity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.RootIdentity.toObject = function(includeInstance, msg) {
  var f, obj = {
    rootEntropy: (f = msg.getRootEntropy()) && proto.external.RootEntropy.toObject(includeInstance, f),
    fogReportUrl: jspb.Message.getFieldWithDefault(msg, 2, ""),
    fogReportId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    fogAuthoritySpki: msg.getFogAuthoritySpki_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.RootIdentity}
 */
proto.external.RootIdentity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.external.RootIdentity;
  return proto.external.RootIdentity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.RootIdentity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.RootIdentity}
 */
proto.external.RootIdentity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.external.RootEntropy;
      reader.readMessage(value,proto.external.RootEntropy.deserializeBinaryFromReader);
      msg.setRootEntropy(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFogReportUrl(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFogReportId(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFogAuthoritySpki(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.RootIdentity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.external.RootIdentity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.RootIdentity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.RootIdentity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRootEntropy();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.external.RootEntropy.serializeBinaryToWriter
    );
  }
  f = message.getFogReportUrl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFogReportId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFogAuthoritySpki_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional RootEntropy root_entropy = 1;
 * @return {?proto.external.RootEntropy}
 */
proto.external.RootIdentity.prototype.getRootEntropy = function() {
  return /** @type{?proto.external.RootEntropy} */ (
    jspb.Message.getWrapperField(this, proto.external.RootEntropy, 1));
};


/**
 * @param {?proto.external.RootEntropy|undefined} value
 * @return {!proto.external.RootIdentity} returns this
*/
proto.external.RootIdentity.prototype.setRootEntropy = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.RootIdentity} returns this
 */
proto.external.RootIdentity.prototype.clearRootEntropy = function() {
  return this.setRootEntropy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.RootIdentity.prototype.hasRootEntropy = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string fog_report_url = 2;
 * @return {string}
 */
proto.external.RootIdentity.prototype.getFogReportUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.external.RootIdentity} returns this
 */
proto.external.RootIdentity.prototype.setFogReportUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string fog_report_id = 3;
 * @return {string}
 */
proto.external.RootIdentity.prototype.getFogReportId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.external.RootIdentity} returns this
 */
proto.external.RootIdentity.prototype.setFogReportId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bytes fog_authority_spki = 5;
 * @return {!(string|Uint8Array)}
 */
proto.external.RootIdentity.prototype.getFogAuthoritySpki = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes fog_authority_spki = 5;
 * This is a type-conversion wrapper around `getFogAuthoritySpki()`
 * @return {string}
 */
proto.external.RootIdentity.prototype.getFogAuthoritySpki_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFogAuthoritySpki()));
};


/**
 * optional bytes fog_authority_spki = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFogAuthoritySpki()`
 * @return {!Uint8Array}
 */
proto.external.RootIdentity.prototype.getFogAuthoritySpki_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFogAuthoritySpki()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.external.RootIdentity} returns this
 */
proto.external.RootIdentity.prototype.setFogAuthoritySpki = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.external.RootEntropy.prototype.toObject = function(opt_includeInstance) {
  return proto.external.RootEntropy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.external.RootEntropy} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.RootEntropy.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.RootEntropy}
 */
proto.external.RootEntropy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.external.RootEntropy;
  return proto.external.RootEntropy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.RootEntropy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.RootEntropy}
 */
proto.external.RootEntropy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.RootEntropy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.external.RootEntropy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.RootEntropy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.RootEntropy.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.external.RootEntropy.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.external.RootEntropy.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.external.RootEntropy.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.external.RootEntropy} returns this
 */
proto.external.RootEntropy.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.external.CurveScalar.prototype.toObject = function(opt_includeInstance) {
  return proto.external.CurveScalar.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.external.CurveScalar} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.CurveScalar.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.CurveScalar}
 */
proto.external.CurveScalar.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.external.CurveScalar;
  return proto.external.CurveScalar.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.CurveScalar} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.CurveScalar}
 */
proto.external.CurveScalar.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.CurveScalar.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.external.CurveScalar.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.CurveScalar} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.CurveScalar.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.external.CurveScalar.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.external.CurveScalar.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.external.CurveScalar.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.external.CurveScalar} returns this
 */
proto.external.CurveScalar.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.external.KeyImage.prototype.toObject = function(opt_includeInstance) {
  return proto.external.KeyImage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.external.KeyImage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.KeyImage.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.KeyImage}
 */
proto.external.KeyImage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.external.KeyImage;
  return proto.external.KeyImage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.KeyImage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.KeyImage}
 */
proto.external.KeyImage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.KeyImage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.external.KeyImage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.KeyImage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.KeyImage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.external.KeyImage.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.external.KeyImage.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.external.KeyImage.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.external.KeyImage} returns this
 */
proto.external.KeyImage.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.external.Range.prototype.toObject = function(opt_includeInstance) {
  return proto.external.Range.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.external.Range} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.Range.toObject = function(includeInstance, msg) {
  var f, obj = {
    from: jspb.Message.getFieldWithDefault(msg, 1, 0),
    to: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.Range}
 */
proto.external.Range.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.external.Range;
  return proto.external.Range.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.Range} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.Range}
 */
proto.external.Range.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFrom(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.Range.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.external.Range.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.Range} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.Range.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrom();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTo();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 from = 1;
 * @return {number}
 */
proto.external.Range.prototype.getFrom = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.external.Range} returns this
 */
proto.external.Range.prototype.setFrom = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 to = 2;
 * @return {number}
 */
proto.external.Range.prototype.getTo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.external.Range} returns this
 */
proto.external.Range.prototype.setTo = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.external.TxOutMembershipHash.prototype.toObject = function(opt_includeInstance) {
  return proto.external.TxOutMembershipHash.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.external.TxOutMembershipHash} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.TxOutMembershipHash.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.TxOutMembershipHash}
 */
proto.external.TxOutMembershipHash.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.external.TxOutMembershipHash;
  return proto.external.TxOutMembershipHash.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.TxOutMembershipHash} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.TxOutMembershipHash}
 */
proto.external.TxOutMembershipHash.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.TxOutMembershipHash.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.external.TxOutMembershipHash.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.TxOutMembershipHash} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.TxOutMembershipHash.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.external.TxOutMembershipHash.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.external.TxOutMembershipHash.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.external.TxOutMembershipHash.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.external.TxOutMembershipHash} returns this
 */
proto.external.TxOutMembershipHash.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.external.TxOutMembershipElement.prototype.toObject = function(opt_includeInstance) {
  return proto.external.TxOutMembershipElement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.external.TxOutMembershipElement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.TxOutMembershipElement.toObject = function(includeInstance, msg) {
  var f, obj = {
    range: (f = msg.getRange()) && proto.external.Range.toObject(includeInstance, f),
    hash: (f = msg.getHash()) && proto.external.TxOutMembershipHash.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.TxOutMembershipElement}
 */
proto.external.TxOutMembershipElement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.external.TxOutMembershipElement;
  return proto.external.TxOutMembershipElement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.TxOutMembershipElement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.TxOutMembershipElement}
 */
proto.external.TxOutMembershipElement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.external.Range;
      reader.readMessage(value,proto.external.Range.deserializeBinaryFromReader);
      msg.setRange(value);
      break;
    case 2:
      var value = new proto.external.TxOutMembershipHash;
      reader.readMessage(value,proto.external.TxOutMembershipHash.deserializeBinaryFromReader);
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.TxOutMembershipElement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.external.TxOutMembershipElement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.TxOutMembershipElement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.TxOutMembershipElement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRange();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.external.Range.serializeBinaryToWriter
    );
  }
  f = message.getHash();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.external.TxOutMembershipHash.serializeBinaryToWriter
    );
  }
};


/**
 * optional Range range = 1;
 * @return {?proto.external.Range}
 */
proto.external.TxOutMembershipElement.prototype.getRange = function() {
  return /** @type{?proto.external.Range} */ (
    jspb.Message.getWrapperField(this, proto.external.Range, 1));
};


/**
 * @param {?proto.external.Range|undefined} value
 * @return {!proto.external.TxOutMembershipElement} returns this
*/
proto.external.TxOutMembershipElement.prototype.setRange = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.TxOutMembershipElement} returns this
 */
proto.external.TxOutMembershipElement.prototype.clearRange = function() {
  return this.setRange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.TxOutMembershipElement.prototype.hasRange = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TxOutMembershipHash hash = 2;
 * @return {?proto.external.TxOutMembershipHash}
 */
proto.external.TxOutMembershipElement.prototype.getHash = function() {
  return /** @type{?proto.external.TxOutMembershipHash} */ (
    jspb.Message.getWrapperField(this, proto.external.TxOutMembershipHash, 2));
};


/**
 * @param {?proto.external.TxOutMembershipHash|undefined} value
 * @return {!proto.external.TxOutMembershipElement} returns this
*/
proto.external.TxOutMembershipElement.prototype.setHash = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.TxOutMembershipElement} returns this
 */
proto.external.TxOutMembershipElement.prototype.clearHash = function() {
  return this.setHash(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.TxOutMembershipElement.prototype.hasHash = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.external.TxOutMembershipProof.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.external.TxOutMembershipProof.prototype.toObject = function(opt_includeInstance) {
  return proto.external.TxOutMembershipProof.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.external.TxOutMembershipProof} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.TxOutMembershipProof.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, 0),
    highestIndex: jspb.Message.getFieldWithDefault(msg, 2, 0),
    elementsList: jspb.Message.toObjectList(msg.getElementsList(),
    proto.external.TxOutMembershipElement.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.TxOutMembershipProof}
 */
proto.external.TxOutMembershipProof.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.external.TxOutMembershipProof;
  return proto.external.TxOutMembershipProof.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.TxOutMembershipProof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.TxOutMembershipProof}
 */
proto.external.TxOutMembershipProof.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIndex(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHighestIndex(value);
      break;
    case 3:
      var value = new proto.external.TxOutMembershipElement;
      reader.readMessage(value,proto.external.TxOutMembershipElement.deserializeBinaryFromReader);
      msg.addElements(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.TxOutMembershipProof.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.external.TxOutMembershipProof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.TxOutMembershipProof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.TxOutMembershipProof.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getHighestIndex();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getElementsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.external.TxOutMembershipElement.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 index = 1;
 * @return {number}
 */
proto.external.TxOutMembershipProof.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.external.TxOutMembershipProof} returns this
 */
proto.external.TxOutMembershipProof.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 highest_index = 2;
 * @return {number}
 */
proto.external.TxOutMembershipProof.prototype.getHighestIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.external.TxOutMembershipProof} returns this
 */
proto.external.TxOutMembershipProof.prototype.setHighestIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated TxOutMembershipElement elements = 3;
 * @return {!Array<!proto.external.TxOutMembershipElement>}
 */
proto.external.TxOutMembershipProof.prototype.getElementsList = function() {
  return /** @type{!Array<!proto.external.TxOutMembershipElement>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.external.TxOutMembershipElement, 3));
};


/**
 * @param {!Array<!proto.external.TxOutMembershipElement>} value
 * @return {!proto.external.TxOutMembershipProof} returns this
*/
proto.external.TxOutMembershipProof.prototype.setElementsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.external.TxOutMembershipElement=} opt_value
 * @param {number=} opt_index
 * @return {!proto.external.TxOutMembershipElement}
 */
proto.external.TxOutMembershipProof.prototype.addElements = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.external.TxOutMembershipElement, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.external.TxOutMembershipProof} returns this
 */
proto.external.TxOutMembershipProof.prototype.clearElementsList = function() {
  return this.setElementsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.external.TxOutConfirmationNumber.prototype.toObject = function(opt_includeInstance) {
  return proto.external.TxOutConfirmationNumber.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.external.TxOutConfirmationNumber} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.TxOutConfirmationNumber.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: msg.getHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.TxOutConfirmationNumber}
 */
proto.external.TxOutConfirmationNumber.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.external.TxOutConfirmationNumber;
  return proto.external.TxOutConfirmationNumber.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.TxOutConfirmationNumber} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.TxOutConfirmationNumber}
 */
proto.external.TxOutConfirmationNumber.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.TxOutConfirmationNumber.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.external.TxOutConfirmationNumber.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.TxOutConfirmationNumber} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.TxOutConfirmationNumber.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.external.TxOutConfirmationNumber.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes hash = 1;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.external.TxOutConfirmationNumber.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.external.TxOutConfirmationNumber.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.external.TxOutConfirmationNumber} returns this
 */
proto.external.TxOutConfirmationNumber.prototype.setHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.external.MaskedAmount.prototype.toObject = function(opt_includeInstance) {
  return proto.external.MaskedAmount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.external.MaskedAmount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.MaskedAmount.toObject = function(includeInstance, msg) {
  var f, obj = {
    commitment: (f = msg.getCommitment()) && proto.external.CompressedRistretto.toObject(includeInstance, f),
    maskedValue: jspb.Message.getFieldWithDefault(msg, 2, 0),
    maskedTokenId: msg.getMaskedTokenId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.MaskedAmount}
 */
proto.external.MaskedAmount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.external.MaskedAmount;
  return proto.external.MaskedAmount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.MaskedAmount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.MaskedAmount}
 */
proto.external.MaskedAmount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.external.CompressedRistretto;
      reader.readMessage(value,proto.external.CompressedRistretto.deserializeBinaryFromReader);
      msg.setCommitment(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setMaskedValue(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMaskedTokenId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.MaskedAmount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.external.MaskedAmount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.MaskedAmount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.MaskedAmount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommitment();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.external.CompressedRistretto.serializeBinaryToWriter
    );
  }
  f = message.getMaskedValue();
  if (f !== 0) {
    writer.writeFixed64(
      2,
      f
    );
  }
  f = message.getMaskedTokenId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional CompressedRistretto commitment = 1;
 * @return {?proto.external.CompressedRistretto}
 */
proto.external.MaskedAmount.prototype.getCommitment = function() {
  return /** @type{?proto.external.CompressedRistretto} */ (
    jspb.Message.getWrapperField(this, proto.external.CompressedRistretto, 1));
};


/**
 * @param {?proto.external.CompressedRistretto|undefined} value
 * @return {!proto.external.MaskedAmount} returns this
*/
proto.external.MaskedAmount.prototype.setCommitment = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.MaskedAmount} returns this
 */
proto.external.MaskedAmount.prototype.clearCommitment = function() {
  return this.setCommitment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.MaskedAmount.prototype.hasCommitment = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional fixed64 masked_value = 2;
 * @return {number}
 */
proto.external.MaskedAmount.prototype.getMaskedValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.external.MaskedAmount} returns this
 */
proto.external.MaskedAmount.prototype.setMaskedValue = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes masked_token_id = 3;
 * @return {!(string|Uint8Array)}
 */
proto.external.MaskedAmount.prototype.getMaskedTokenId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes masked_token_id = 3;
 * This is a type-conversion wrapper around `getMaskedTokenId()`
 * @return {string}
 */
proto.external.MaskedAmount.prototype.getMaskedTokenId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMaskedTokenId()));
};


/**
 * optional bytes masked_token_id = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMaskedTokenId()`
 * @return {!Uint8Array}
 */
proto.external.MaskedAmount.prototype.getMaskedTokenId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMaskedTokenId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.external.MaskedAmount} returns this
 */
proto.external.MaskedAmount.prototype.setMaskedTokenId = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.external.EncryptedFogHint.prototype.toObject = function(opt_includeInstance) {
  return proto.external.EncryptedFogHint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.external.EncryptedFogHint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.EncryptedFogHint.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.EncryptedFogHint}
 */
proto.external.EncryptedFogHint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.external.EncryptedFogHint;
  return proto.external.EncryptedFogHint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.EncryptedFogHint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.EncryptedFogHint}
 */
proto.external.EncryptedFogHint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.EncryptedFogHint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.external.EncryptedFogHint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.EncryptedFogHint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.EncryptedFogHint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.external.EncryptedFogHint.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.external.EncryptedFogHint.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.external.EncryptedFogHint.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.external.EncryptedFogHint} returns this
 */
proto.external.EncryptedFogHint.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.external.EncryptedMemo.prototype.toObject = function(opt_includeInstance) {
  return proto.external.EncryptedMemo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.external.EncryptedMemo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.EncryptedMemo.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.EncryptedMemo}
 */
proto.external.EncryptedMemo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.external.EncryptedMemo;
  return proto.external.EncryptedMemo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.EncryptedMemo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.EncryptedMemo}
 */
proto.external.EncryptedMemo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.EncryptedMemo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.external.EncryptedMemo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.EncryptedMemo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.EncryptedMemo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.external.EncryptedMemo.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.external.EncryptedMemo.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.external.EncryptedMemo.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.external.EncryptedMemo} returns this
 */
proto.external.EncryptedMemo.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.external.TxOut.oneofGroups_ = [[1,6]];

/**
 * @enum {number}
 */
proto.external.TxOut.MaskedAmountCase = {
  MASKED_AMOUNT_NOT_SET: 0,
  MASKED_AMOUNT_V1: 1,
  MASKED_AMOUNT_V2: 6
};

/**
 * @return {proto.external.TxOut.MaskedAmountCase}
 */
proto.external.TxOut.prototype.getMaskedAmountCase = function() {
  return /** @type {proto.external.TxOut.MaskedAmountCase} */(jspb.Message.computeOneofCase(this, proto.external.TxOut.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.external.TxOut.prototype.toObject = function(opt_includeInstance) {
  return proto.external.TxOut.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.external.TxOut} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.TxOut.toObject = function(includeInstance, msg) {
  var f, obj = {
    maskedAmountV1: (f = msg.getMaskedAmountV1()) && proto.external.MaskedAmount.toObject(includeInstance, f),
    maskedAmountV2: (f = msg.getMaskedAmountV2()) && proto.external.MaskedAmount.toObject(includeInstance, f),
    targetKey: (f = msg.getTargetKey()) && proto.external.CompressedRistretto.toObject(includeInstance, f),
    publicKey: (f = msg.getPublicKey()) && proto.external.CompressedRistretto.toObject(includeInstance, f),
    eFogHint: (f = msg.getEFogHint()) && proto.external.EncryptedFogHint.toObject(includeInstance, f),
    eMemo: (f = msg.getEMemo()) && proto.external.EncryptedMemo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.TxOut}
 */
proto.external.TxOut.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.external.TxOut;
  return proto.external.TxOut.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.TxOut} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.TxOut}
 */
proto.external.TxOut.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.external.MaskedAmount;
      reader.readMessage(value,proto.external.MaskedAmount.deserializeBinaryFromReader);
      msg.setMaskedAmountV1(value);
      break;
    case 6:
      var value = new proto.external.MaskedAmount;
      reader.readMessage(value,proto.external.MaskedAmount.deserializeBinaryFromReader);
      msg.setMaskedAmountV2(value);
      break;
    case 2:
      var value = new proto.external.CompressedRistretto;
      reader.readMessage(value,proto.external.CompressedRistretto.deserializeBinaryFromReader);
      msg.setTargetKey(value);
      break;
    case 3:
      var value = new proto.external.CompressedRistretto;
      reader.readMessage(value,proto.external.CompressedRistretto.deserializeBinaryFromReader);
      msg.setPublicKey(value);
      break;
    case 4:
      var value = new proto.external.EncryptedFogHint;
      reader.readMessage(value,proto.external.EncryptedFogHint.deserializeBinaryFromReader);
      msg.setEFogHint(value);
      break;
    case 5:
      var value = new proto.external.EncryptedMemo;
      reader.readMessage(value,proto.external.EncryptedMemo.deserializeBinaryFromReader);
      msg.setEMemo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.TxOut.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.external.TxOut.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.TxOut} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.TxOut.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMaskedAmountV1();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.external.MaskedAmount.serializeBinaryToWriter
    );
  }
  f = message.getMaskedAmountV2();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.external.MaskedAmount.serializeBinaryToWriter
    );
  }
  f = message.getTargetKey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.external.CompressedRistretto.serializeBinaryToWriter
    );
  }
  f = message.getPublicKey();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.external.CompressedRistretto.serializeBinaryToWriter
    );
  }
  f = message.getEFogHint();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.external.EncryptedFogHint.serializeBinaryToWriter
    );
  }
  f = message.getEMemo();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.external.EncryptedMemo.serializeBinaryToWriter
    );
  }
};


/**
 * optional MaskedAmount masked_amount_v1 = 1;
 * @return {?proto.external.MaskedAmount}
 */
proto.external.TxOut.prototype.getMaskedAmountV1 = function() {
  return /** @type{?proto.external.MaskedAmount} */ (
    jspb.Message.getWrapperField(this, proto.external.MaskedAmount, 1));
};


/**
 * @param {?proto.external.MaskedAmount|undefined} value
 * @return {!proto.external.TxOut} returns this
*/
proto.external.TxOut.prototype.setMaskedAmountV1 = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.external.TxOut.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.TxOut} returns this
 */
proto.external.TxOut.prototype.clearMaskedAmountV1 = function() {
  return this.setMaskedAmountV1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.TxOut.prototype.hasMaskedAmountV1 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MaskedAmount masked_amount_v2 = 6;
 * @return {?proto.external.MaskedAmount}
 */
proto.external.TxOut.prototype.getMaskedAmountV2 = function() {
  return /** @type{?proto.external.MaskedAmount} */ (
    jspb.Message.getWrapperField(this, proto.external.MaskedAmount, 6));
};


/**
 * @param {?proto.external.MaskedAmount|undefined} value
 * @return {!proto.external.TxOut} returns this
*/
proto.external.TxOut.prototype.setMaskedAmountV2 = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.external.TxOut.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.TxOut} returns this
 */
proto.external.TxOut.prototype.clearMaskedAmountV2 = function() {
  return this.setMaskedAmountV2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.TxOut.prototype.hasMaskedAmountV2 = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional CompressedRistretto target_key = 2;
 * @return {?proto.external.CompressedRistretto}
 */
proto.external.TxOut.prototype.getTargetKey = function() {
  return /** @type{?proto.external.CompressedRistretto} */ (
    jspb.Message.getWrapperField(this, proto.external.CompressedRistretto, 2));
};


/**
 * @param {?proto.external.CompressedRistretto|undefined} value
 * @return {!proto.external.TxOut} returns this
*/
proto.external.TxOut.prototype.setTargetKey = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.TxOut} returns this
 */
proto.external.TxOut.prototype.clearTargetKey = function() {
  return this.setTargetKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.TxOut.prototype.hasTargetKey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CompressedRistretto public_key = 3;
 * @return {?proto.external.CompressedRistretto}
 */
proto.external.TxOut.prototype.getPublicKey = function() {
  return /** @type{?proto.external.CompressedRistretto} */ (
    jspb.Message.getWrapperField(this, proto.external.CompressedRistretto, 3));
};


/**
 * @param {?proto.external.CompressedRistretto|undefined} value
 * @return {!proto.external.TxOut} returns this
*/
proto.external.TxOut.prototype.setPublicKey = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.TxOut} returns this
 */
proto.external.TxOut.prototype.clearPublicKey = function() {
  return this.setPublicKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.TxOut.prototype.hasPublicKey = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional EncryptedFogHint e_fog_hint = 4;
 * @return {?proto.external.EncryptedFogHint}
 */
proto.external.TxOut.prototype.getEFogHint = function() {
  return /** @type{?proto.external.EncryptedFogHint} */ (
    jspb.Message.getWrapperField(this, proto.external.EncryptedFogHint, 4));
};


/**
 * @param {?proto.external.EncryptedFogHint|undefined} value
 * @return {!proto.external.TxOut} returns this
*/
proto.external.TxOut.prototype.setEFogHint = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.TxOut} returns this
 */
proto.external.TxOut.prototype.clearEFogHint = function() {
  return this.setEFogHint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.TxOut.prototype.hasEFogHint = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional EncryptedMemo e_memo = 5;
 * @return {?proto.external.EncryptedMemo}
 */
proto.external.TxOut.prototype.getEMemo = function() {
  return /** @type{?proto.external.EncryptedMemo} */ (
    jspb.Message.getWrapperField(this, proto.external.EncryptedMemo, 5));
};


/**
 * @param {?proto.external.EncryptedMemo|undefined} value
 * @return {!proto.external.TxOut} returns this
*/
proto.external.TxOut.prototype.setEMemo = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.TxOut} returns this
 */
proto.external.TxOut.prototype.clearEMemo = function() {
  return this.setEMemo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.TxOut.prototype.hasEMemo = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.external.TxIn.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.external.TxIn.prototype.toObject = function(opt_includeInstance) {
  return proto.external.TxIn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.external.TxIn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.TxIn.toObject = function(includeInstance, msg) {
  var f, obj = {
    ringList: jspb.Message.toObjectList(msg.getRingList(),
    proto.external.TxOut.toObject, includeInstance),
    proofsList: jspb.Message.toObjectList(msg.getProofsList(),
    proto.external.TxOutMembershipProof.toObject, includeInstance),
    inputRules: (f = msg.getInputRules()) && proto.external.InputRules.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.TxIn}
 */
proto.external.TxIn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.external.TxIn;
  return proto.external.TxIn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.TxIn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.TxIn}
 */
proto.external.TxIn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.external.TxOut;
      reader.readMessage(value,proto.external.TxOut.deserializeBinaryFromReader);
      msg.addRing(value);
      break;
    case 2:
      var value = new proto.external.TxOutMembershipProof;
      reader.readMessage(value,proto.external.TxOutMembershipProof.deserializeBinaryFromReader);
      msg.addProofs(value);
      break;
    case 3:
      var value = new proto.external.InputRules;
      reader.readMessage(value,proto.external.InputRules.deserializeBinaryFromReader);
      msg.setInputRules(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.TxIn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.external.TxIn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.TxIn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.TxIn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRingList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.external.TxOut.serializeBinaryToWriter
    );
  }
  f = message.getProofsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.external.TxOutMembershipProof.serializeBinaryToWriter
    );
  }
  f = message.getInputRules();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.external.InputRules.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TxOut ring = 1;
 * @return {!Array<!proto.external.TxOut>}
 */
proto.external.TxIn.prototype.getRingList = function() {
  return /** @type{!Array<!proto.external.TxOut>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.external.TxOut, 1));
};


/**
 * @param {!Array<!proto.external.TxOut>} value
 * @return {!proto.external.TxIn} returns this
*/
proto.external.TxIn.prototype.setRingList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.external.TxOut=} opt_value
 * @param {number=} opt_index
 * @return {!proto.external.TxOut}
 */
proto.external.TxIn.prototype.addRing = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.external.TxOut, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.external.TxIn} returns this
 */
proto.external.TxIn.prototype.clearRingList = function() {
  return this.setRingList([]);
};


/**
 * repeated TxOutMembershipProof proofs = 2;
 * @return {!Array<!proto.external.TxOutMembershipProof>}
 */
proto.external.TxIn.prototype.getProofsList = function() {
  return /** @type{!Array<!proto.external.TxOutMembershipProof>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.external.TxOutMembershipProof, 2));
};


/**
 * @param {!Array<!proto.external.TxOutMembershipProof>} value
 * @return {!proto.external.TxIn} returns this
*/
proto.external.TxIn.prototype.setProofsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.external.TxOutMembershipProof=} opt_value
 * @param {number=} opt_index
 * @return {!proto.external.TxOutMembershipProof}
 */
proto.external.TxIn.prototype.addProofs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.external.TxOutMembershipProof, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.external.TxIn} returns this
 */
proto.external.TxIn.prototype.clearProofsList = function() {
  return this.setProofsList([]);
};


/**
 * optional InputRules input_rules = 3;
 * @return {?proto.external.InputRules}
 */
proto.external.TxIn.prototype.getInputRules = function() {
  return /** @type{?proto.external.InputRules} */ (
    jspb.Message.getWrapperField(this, proto.external.InputRules, 3));
};


/**
 * @param {?proto.external.InputRules|undefined} value
 * @return {!proto.external.TxIn} returns this
*/
proto.external.TxIn.prototype.setInputRules = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.TxIn} returns this
 */
proto.external.TxIn.prototype.clearInputRules = function() {
  return this.setInputRules(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.TxIn.prototype.hasInputRules = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.external.InputRules.repeatedFields_ = [1,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.external.InputRules.prototype.toObject = function(opt_includeInstance) {
  return proto.external.InputRules.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.external.InputRules} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.InputRules.toObject = function(includeInstance, msg) {
  var f, obj = {
    requiredOutputsList: jspb.Message.toObjectList(msg.getRequiredOutputsList(),
    proto.external.TxOut.toObject, includeInstance),
    maxTombstoneBlock: jspb.Message.getFieldWithDefault(msg, 2, 0),
    partialFillOutputsList: jspb.Message.toObjectList(msg.getPartialFillOutputsList(),
    proto.external.RevealedTxOut.toObject, includeInstance),
    partialFillChange: (f = msg.getPartialFillChange()) && proto.external.RevealedTxOut.toObject(includeInstance, f),
    minPartialFillValue: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.InputRules}
 */
proto.external.InputRules.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.external.InputRules;
  return proto.external.InputRules.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.InputRules} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.InputRules}
 */
proto.external.InputRules.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.external.TxOut;
      reader.readMessage(value,proto.external.TxOut.deserializeBinaryFromReader);
      msg.addRequiredOutputs(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setMaxTombstoneBlock(value);
      break;
    case 3:
      var value = new proto.external.RevealedTxOut;
      reader.readMessage(value,proto.external.RevealedTxOut.deserializeBinaryFromReader);
      msg.addPartialFillOutputs(value);
      break;
    case 4:
      var value = new proto.external.RevealedTxOut;
      reader.readMessage(value,proto.external.RevealedTxOut.deserializeBinaryFromReader);
      msg.setPartialFillChange(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setMinPartialFillValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.InputRules.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.external.InputRules.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.InputRules} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.InputRules.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequiredOutputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.external.TxOut.serializeBinaryToWriter
    );
  }
  f = message.getMaxTombstoneBlock();
  if (f !== 0) {
    writer.writeFixed64(
      2,
      f
    );
  }
  f = message.getPartialFillOutputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.external.RevealedTxOut.serializeBinaryToWriter
    );
  }
  f = message.getPartialFillChange();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.external.RevealedTxOut.serializeBinaryToWriter
    );
  }
  f = message.getMinPartialFillValue();
  if (f !== 0) {
    writer.writeFixed64(
      5,
      f
    );
  }
};


/**
 * repeated TxOut required_outputs = 1;
 * @return {!Array<!proto.external.TxOut>}
 */
proto.external.InputRules.prototype.getRequiredOutputsList = function() {
  return /** @type{!Array<!proto.external.TxOut>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.external.TxOut, 1));
};


/**
 * @param {!Array<!proto.external.TxOut>} value
 * @return {!proto.external.InputRules} returns this
*/
proto.external.InputRules.prototype.setRequiredOutputsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.external.TxOut=} opt_value
 * @param {number=} opt_index
 * @return {!proto.external.TxOut}
 */
proto.external.InputRules.prototype.addRequiredOutputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.external.TxOut, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.external.InputRules} returns this
 */
proto.external.InputRules.prototype.clearRequiredOutputsList = function() {
  return this.setRequiredOutputsList([]);
};


/**
 * optional fixed64 max_tombstone_block = 2;
 * @return {number}
 */
proto.external.InputRules.prototype.getMaxTombstoneBlock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.external.InputRules} returns this
 */
proto.external.InputRules.prototype.setMaxTombstoneBlock = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated RevealedTxOut partial_fill_outputs = 3;
 * @return {!Array<!proto.external.RevealedTxOut>}
 */
proto.external.InputRules.prototype.getPartialFillOutputsList = function() {
  return /** @type{!Array<!proto.external.RevealedTxOut>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.external.RevealedTxOut, 3));
};


/**
 * @param {!Array<!proto.external.RevealedTxOut>} value
 * @return {!proto.external.InputRules} returns this
*/
proto.external.InputRules.prototype.setPartialFillOutputsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.external.RevealedTxOut=} opt_value
 * @param {number=} opt_index
 * @return {!proto.external.RevealedTxOut}
 */
proto.external.InputRules.prototype.addPartialFillOutputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.external.RevealedTxOut, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.external.InputRules} returns this
 */
proto.external.InputRules.prototype.clearPartialFillOutputsList = function() {
  return this.setPartialFillOutputsList([]);
};


/**
 * optional RevealedTxOut partial_fill_change = 4;
 * @return {?proto.external.RevealedTxOut}
 */
proto.external.InputRules.prototype.getPartialFillChange = function() {
  return /** @type{?proto.external.RevealedTxOut} */ (
    jspb.Message.getWrapperField(this, proto.external.RevealedTxOut, 4));
};


/**
 * @param {?proto.external.RevealedTxOut|undefined} value
 * @return {!proto.external.InputRules} returns this
*/
proto.external.InputRules.prototype.setPartialFillChange = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.InputRules} returns this
 */
proto.external.InputRules.prototype.clearPartialFillChange = function() {
  return this.setPartialFillChange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.InputRules.prototype.hasPartialFillChange = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional fixed64 min_partial_fill_value = 5;
 * @return {number}
 */
proto.external.InputRules.prototype.getMinPartialFillValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.external.InputRules} returns this
 */
proto.external.InputRules.prototype.setMinPartialFillValue = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.external.RevealedTxOut.prototype.toObject = function(opt_includeInstance) {
  return proto.external.RevealedTxOut.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.external.RevealedTxOut} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.RevealedTxOut.toObject = function(includeInstance, msg) {
  var f, obj = {
    txOut: (f = msg.getTxOut()) && proto.external.TxOut.toObject(includeInstance, f),
    amountSharedSecret: msg.getAmountSharedSecret_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.RevealedTxOut}
 */
proto.external.RevealedTxOut.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.external.RevealedTxOut;
  return proto.external.RevealedTxOut.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.RevealedTxOut} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.RevealedTxOut}
 */
proto.external.RevealedTxOut.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.external.TxOut;
      reader.readMessage(value,proto.external.TxOut.deserializeBinaryFromReader);
      msg.setTxOut(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAmountSharedSecret(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.RevealedTxOut.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.external.RevealedTxOut.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.RevealedTxOut} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.RevealedTxOut.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxOut();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.external.TxOut.serializeBinaryToWriter
    );
  }
  f = message.getAmountSharedSecret_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional TxOut tx_out = 1;
 * @return {?proto.external.TxOut}
 */
proto.external.RevealedTxOut.prototype.getTxOut = function() {
  return /** @type{?proto.external.TxOut} */ (
    jspb.Message.getWrapperField(this, proto.external.TxOut, 1));
};


/**
 * @param {?proto.external.TxOut|undefined} value
 * @return {!proto.external.RevealedTxOut} returns this
*/
proto.external.RevealedTxOut.prototype.setTxOut = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.RevealedTxOut} returns this
 */
proto.external.RevealedTxOut.prototype.clearTxOut = function() {
  return this.setTxOut(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.RevealedTxOut.prototype.hasTxOut = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes amount_shared_secret = 2;
 * @return {!(string|Uint8Array)}
 */
proto.external.RevealedTxOut.prototype.getAmountSharedSecret = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes amount_shared_secret = 2;
 * This is a type-conversion wrapper around `getAmountSharedSecret()`
 * @return {string}
 */
proto.external.RevealedTxOut.prototype.getAmountSharedSecret_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAmountSharedSecret()));
};


/**
 * optional bytes amount_shared_secret = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAmountSharedSecret()`
 * @return {!Uint8Array}
 */
proto.external.RevealedTxOut.prototype.getAmountSharedSecret_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAmountSharedSecret()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.external.RevealedTxOut} returns this
 */
proto.external.RevealedTxOut.prototype.setAmountSharedSecret = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.external.TxPrefix.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.external.TxPrefix.prototype.toObject = function(opt_includeInstance) {
  return proto.external.TxPrefix.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.external.TxPrefix} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.TxPrefix.toObject = function(includeInstance, msg) {
  var f, obj = {
    inputsList: jspb.Message.toObjectList(msg.getInputsList(),
    proto.external.TxIn.toObject, includeInstance),
    outputsList: jspb.Message.toObjectList(msg.getOutputsList(),
    proto.external.TxOut.toObject, includeInstance),
    fee: jspb.Message.getFieldWithDefault(msg, 3, 0),
    tombstoneBlock: jspb.Message.getFieldWithDefault(msg, 4, 0),
    feeTokenId: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.TxPrefix}
 */
proto.external.TxPrefix.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.external.TxPrefix;
  return proto.external.TxPrefix.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.TxPrefix} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.TxPrefix}
 */
proto.external.TxPrefix.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.external.TxIn;
      reader.readMessage(value,proto.external.TxIn.deserializeBinaryFromReader);
      msg.addInputs(value);
      break;
    case 2:
      var value = new proto.external.TxOut;
      reader.readMessage(value,proto.external.TxOut.deserializeBinaryFromReader);
      msg.addOutputs(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFee(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTombstoneBlock(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setFeeTokenId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.TxPrefix.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.external.TxPrefix.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.TxPrefix} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.TxPrefix.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.external.TxIn.serializeBinaryToWriter
    );
  }
  f = message.getOutputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.external.TxOut.serializeBinaryToWriter
    );
  }
  f = message.getFee();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getTombstoneBlock();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getFeeTokenId();
  if (f !== 0) {
    writer.writeFixed64(
      5,
      f
    );
  }
};


/**
 * repeated TxIn inputs = 1;
 * @return {!Array<!proto.external.TxIn>}
 */
proto.external.TxPrefix.prototype.getInputsList = function() {
  return /** @type{!Array<!proto.external.TxIn>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.external.TxIn, 1));
};


/**
 * @param {!Array<!proto.external.TxIn>} value
 * @return {!proto.external.TxPrefix} returns this
*/
proto.external.TxPrefix.prototype.setInputsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.external.TxIn=} opt_value
 * @param {number=} opt_index
 * @return {!proto.external.TxIn}
 */
proto.external.TxPrefix.prototype.addInputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.external.TxIn, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.external.TxPrefix} returns this
 */
proto.external.TxPrefix.prototype.clearInputsList = function() {
  return this.setInputsList([]);
};


/**
 * repeated TxOut outputs = 2;
 * @return {!Array<!proto.external.TxOut>}
 */
proto.external.TxPrefix.prototype.getOutputsList = function() {
  return /** @type{!Array<!proto.external.TxOut>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.external.TxOut, 2));
};


/**
 * @param {!Array<!proto.external.TxOut>} value
 * @return {!proto.external.TxPrefix} returns this
*/
proto.external.TxPrefix.prototype.setOutputsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.external.TxOut=} opt_value
 * @param {number=} opt_index
 * @return {!proto.external.TxOut}
 */
proto.external.TxPrefix.prototype.addOutputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.external.TxOut, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.external.TxPrefix} returns this
 */
proto.external.TxPrefix.prototype.clearOutputsList = function() {
  return this.setOutputsList([]);
};


/**
 * optional uint64 fee = 3;
 * @return {number}
 */
proto.external.TxPrefix.prototype.getFee = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.external.TxPrefix} returns this
 */
proto.external.TxPrefix.prototype.setFee = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 tombstone_block = 4;
 * @return {number}
 */
proto.external.TxPrefix.prototype.getTombstoneBlock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.external.TxPrefix} returns this
 */
proto.external.TxPrefix.prototype.setTombstoneBlock = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional fixed64 fee_token_id = 5;
 * @return {number}
 */
proto.external.TxPrefix.prototype.getFeeTokenId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.external.TxPrefix} returns this
 */
proto.external.TxPrefix.prototype.setFeeTokenId = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.external.RingMLSAG.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.external.RingMLSAG.prototype.toObject = function(opt_includeInstance) {
  return proto.external.RingMLSAG.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.external.RingMLSAG} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.RingMLSAG.toObject = function(includeInstance, msg) {
  var f, obj = {
    cZero: (f = msg.getCZero()) && proto.external.CurveScalar.toObject(includeInstance, f),
    responsesList: jspb.Message.toObjectList(msg.getResponsesList(),
    proto.external.CurveScalar.toObject, includeInstance),
    keyImage: (f = msg.getKeyImage()) && proto.external.KeyImage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.RingMLSAG}
 */
proto.external.RingMLSAG.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.external.RingMLSAG;
  return proto.external.RingMLSAG.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.RingMLSAG} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.RingMLSAG}
 */
proto.external.RingMLSAG.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.external.CurveScalar;
      reader.readMessage(value,proto.external.CurveScalar.deserializeBinaryFromReader);
      msg.setCZero(value);
      break;
    case 2:
      var value = new proto.external.CurveScalar;
      reader.readMessage(value,proto.external.CurveScalar.deserializeBinaryFromReader);
      msg.addResponses(value);
      break;
    case 3:
      var value = new proto.external.KeyImage;
      reader.readMessage(value,proto.external.KeyImage.deserializeBinaryFromReader);
      msg.setKeyImage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.RingMLSAG.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.external.RingMLSAG.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.RingMLSAG} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.RingMLSAG.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCZero();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.external.CurveScalar.serializeBinaryToWriter
    );
  }
  f = message.getResponsesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.external.CurveScalar.serializeBinaryToWriter
    );
  }
  f = message.getKeyImage();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.external.KeyImage.serializeBinaryToWriter
    );
  }
};


/**
 * optional CurveScalar c_zero = 1;
 * @return {?proto.external.CurveScalar}
 */
proto.external.RingMLSAG.prototype.getCZero = function() {
  return /** @type{?proto.external.CurveScalar} */ (
    jspb.Message.getWrapperField(this, proto.external.CurveScalar, 1));
};


/**
 * @param {?proto.external.CurveScalar|undefined} value
 * @return {!proto.external.RingMLSAG} returns this
*/
proto.external.RingMLSAG.prototype.setCZero = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.RingMLSAG} returns this
 */
proto.external.RingMLSAG.prototype.clearCZero = function() {
  return this.setCZero(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.RingMLSAG.prototype.hasCZero = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated CurveScalar responses = 2;
 * @return {!Array<!proto.external.CurveScalar>}
 */
proto.external.RingMLSAG.prototype.getResponsesList = function() {
  return /** @type{!Array<!proto.external.CurveScalar>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.external.CurveScalar, 2));
};


/**
 * @param {!Array<!proto.external.CurveScalar>} value
 * @return {!proto.external.RingMLSAG} returns this
*/
proto.external.RingMLSAG.prototype.setResponsesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.external.CurveScalar=} opt_value
 * @param {number=} opt_index
 * @return {!proto.external.CurveScalar}
 */
proto.external.RingMLSAG.prototype.addResponses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.external.CurveScalar, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.external.RingMLSAG} returns this
 */
proto.external.RingMLSAG.prototype.clearResponsesList = function() {
  return this.setResponsesList([]);
};


/**
 * optional KeyImage key_image = 3;
 * @return {?proto.external.KeyImage}
 */
proto.external.RingMLSAG.prototype.getKeyImage = function() {
  return /** @type{?proto.external.KeyImage} */ (
    jspb.Message.getWrapperField(this, proto.external.KeyImage, 3));
};


/**
 * @param {?proto.external.KeyImage|undefined} value
 * @return {!proto.external.RingMLSAG} returns this
*/
proto.external.RingMLSAG.prototype.setKeyImage = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.RingMLSAG} returns this
 */
proto.external.RingMLSAG.prototype.clearKeyImage = function() {
  return this.setKeyImage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.RingMLSAG.prototype.hasKeyImage = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.external.SignatureRctBulletproofs.repeatedFields_ = [1,2,4,5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.external.SignatureRctBulletproofs.prototype.toObject = function(opt_includeInstance) {
  return proto.external.SignatureRctBulletproofs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.external.SignatureRctBulletproofs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.SignatureRctBulletproofs.toObject = function(includeInstance, msg) {
  var f, obj = {
    ringSignaturesList: jspb.Message.toObjectList(msg.getRingSignaturesList(),
    proto.external.RingMLSAG.toObject, includeInstance),
    pseudoOutputCommitmentsList: jspb.Message.toObjectList(msg.getPseudoOutputCommitmentsList(),
    proto.external.CompressedRistretto.toObject, includeInstance),
    rangeProofBytes: msg.getRangeProofBytes_asB64(),
    rangeProofsList: msg.getRangeProofsList_asB64(),
    pseudoOutputTokenIdsList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    outputTokenIdsList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.SignatureRctBulletproofs}
 */
proto.external.SignatureRctBulletproofs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.external.SignatureRctBulletproofs;
  return proto.external.SignatureRctBulletproofs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.SignatureRctBulletproofs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.SignatureRctBulletproofs}
 */
proto.external.SignatureRctBulletproofs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.external.RingMLSAG;
      reader.readMessage(value,proto.external.RingMLSAG.deserializeBinaryFromReader);
      msg.addRingSignatures(value);
      break;
    case 2:
      var value = new proto.external.CompressedRistretto;
      reader.readMessage(value,proto.external.CompressedRistretto.deserializeBinaryFromReader);
      msg.addPseudoOutputCommitments(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRangeProofBytes(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addRangeProofs(value);
      break;
    case 5:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFixed64() : [reader.readFixed64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addPseudoOutputTokenIds(values[i]);
      }
      break;
    case 6:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFixed64() : [reader.readFixed64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addOutputTokenIds(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.SignatureRctBulletproofs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.external.SignatureRctBulletproofs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.SignatureRctBulletproofs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.SignatureRctBulletproofs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRingSignaturesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.external.RingMLSAG.serializeBinaryToWriter
    );
  }
  f = message.getPseudoOutputCommitmentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.external.CompressedRistretto.serializeBinaryToWriter
    );
  }
  f = message.getRangeProofBytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getRangeProofsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      4,
      f
    );
  }
  f = message.getPseudoOutputTokenIdsList();
  if (f.length > 0) {
    writer.writePackedFixed64(
      5,
      f
    );
  }
  f = message.getOutputTokenIdsList();
  if (f.length > 0) {
    writer.writePackedFixed64(
      6,
      f
    );
  }
};


/**
 * repeated RingMLSAG ring_signatures = 1;
 * @return {!Array<!proto.external.RingMLSAG>}
 */
proto.external.SignatureRctBulletproofs.prototype.getRingSignaturesList = function() {
  return /** @type{!Array<!proto.external.RingMLSAG>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.external.RingMLSAG, 1));
};


/**
 * @param {!Array<!proto.external.RingMLSAG>} value
 * @return {!proto.external.SignatureRctBulletproofs} returns this
*/
proto.external.SignatureRctBulletproofs.prototype.setRingSignaturesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.external.RingMLSAG=} opt_value
 * @param {number=} opt_index
 * @return {!proto.external.RingMLSAG}
 */
proto.external.SignatureRctBulletproofs.prototype.addRingSignatures = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.external.RingMLSAG, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.external.SignatureRctBulletproofs} returns this
 */
proto.external.SignatureRctBulletproofs.prototype.clearRingSignaturesList = function() {
  return this.setRingSignaturesList([]);
};


/**
 * repeated CompressedRistretto pseudo_output_commitments = 2;
 * @return {!Array<!proto.external.CompressedRistretto>}
 */
proto.external.SignatureRctBulletproofs.prototype.getPseudoOutputCommitmentsList = function() {
  return /** @type{!Array<!proto.external.CompressedRistretto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.external.CompressedRistretto, 2));
};


/**
 * @param {!Array<!proto.external.CompressedRistretto>} value
 * @return {!proto.external.SignatureRctBulletproofs} returns this
*/
proto.external.SignatureRctBulletproofs.prototype.setPseudoOutputCommitmentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.external.CompressedRistretto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.external.CompressedRistretto}
 */
proto.external.SignatureRctBulletproofs.prototype.addPseudoOutputCommitments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.external.CompressedRistretto, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.external.SignatureRctBulletproofs} returns this
 */
proto.external.SignatureRctBulletproofs.prototype.clearPseudoOutputCommitmentsList = function() {
  return this.setPseudoOutputCommitmentsList([]);
};


/**
 * optional bytes range_proof_bytes = 3;
 * @return {!(string|Uint8Array)}
 */
proto.external.SignatureRctBulletproofs.prototype.getRangeProofBytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes range_proof_bytes = 3;
 * This is a type-conversion wrapper around `getRangeProofBytes()`
 * @return {string}
 */
proto.external.SignatureRctBulletproofs.prototype.getRangeProofBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRangeProofBytes()));
};


/**
 * optional bytes range_proof_bytes = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRangeProofBytes()`
 * @return {!Uint8Array}
 */
proto.external.SignatureRctBulletproofs.prototype.getRangeProofBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRangeProofBytes()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.external.SignatureRctBulletproofs} returns this
 */
proto.external.SignatureRctBulletproofs.prototype.setRangeProofBytes = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * repeated bytes range_proofs = 4;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.external.SignatureRctBulletproofs.prototype.getRangeProofsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * repeated bytes range_proofs = 4;
 * This is a type-conversion wrapper around `getRangeProofsList()`
 * @return {!Array<string>}
 */
proto.external.SignatureRctBulletproofs.prototype.getRangeProofsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getRangeProofsList()));
};


/**
 * repeated bytes range_proofs = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRangeProofsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.external.SignatureRctBulletproofs.prototype.getRangeProofsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getRangeProofsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.external.SignatureRctBulletproofs} returns this
 */
proto.external.SignatureRctBulletproofs.prototype.setRangeProofsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.external.SignatureRctBulletproofs} returns this
 */
proto.external.SignatureRctBulletproofs.prototype.addRangeProofs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.external.SignatureRctBulletproofs} returns this
 */
proto.external.SignatureRctBulletproofs.prototype.clearRangeProofsList = function() {
  return this.setRangeProofsList([]);
};


/**
 * repeated fixed64 pseudo_output_token_ids = 5;
 * @return {!Array<number>}
 */
proto.external.SignatureRctBulletproofs.prototype.getPseudoOutputTokenIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.external.SignatureRctBulletproofs} returns this
 */
proto.external.SignatureRctBulletproofs.prototype.setPseudoOutputTokenIdsList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.external.SignatureRctBulletproofs} returns this
 */
proto.external.SignatureRctBulletproofs.prototype.addPseudoOutputTokenIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.external.SignatureRctBulletproofs} returns this
 */
proto.external.SignatureRctBulletproofs.prototype.clearPseudoOutputTokenIdsList = function() {
  return this.setPseudoOutputTokenIdsList([]);
};


/**
 * repeated fixed64 output_token_ids = 6;
 * @return {!Array<number>}
 */
proto.external.SignatureRctBulletproofs.prototype.getOutputTokenIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.external.SignatureRctBulletproofs} returns this
 */
proto.external.SignatureRctBulletproofs.prototype.setOutputTokenIdsList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.external.SignatureRctBulletproofs} returns this
 */
proto.external.SignatureRctBulletproofs.prototype.addOutputTokenIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.external.SignatureRctBulletproofs} returns this
 */
proto.external.SignatureRctBulletproofs.prototype.clearOutputTokenIdsList = function() {
  return this.setOutputTokenIdsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.external.Tx.prototype.toObject = function(opt_includeInstance) {
  return proto.external.Tx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.external.Tx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.Tx.toObject = function(includeInstance, msg) {
  var f, obj = {
    prefix: (f = msg.getPrefix()) && proto.external.TxPrefix.toObject(includeInstance, f),
    signature: (f = msg.getSignature()) && proto.external.SignatureRctBulletproofs.toObject(includeInstance, f),
    feeMapDigest: msg.getFeeMapDigest_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.Tx}
 */
proto.external.Tx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.external.Tx;
  return proto.external.Tx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.Tx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.Tx}
 */
proto.external.Tx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.external.TxPrefix;
      reader.readMessage(value,proto.external.TxPrefix.deserializeBinaryFromReader);
      msg.setPrefix(value);
      break;
    case 2:
      var value = new proto.external.SignatureRctBulletproofs;
      reader.readMessage(value,proto.external.SignatureRctBulletproofs.deserializeBinaryFromReader);
      msg.setSignature(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFeeMapDigest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.Tx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.external.Tx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.Tx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.Tx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrefix();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.external.TxPrefix.serializeBinaryToWriter
    );
  }
  f = message.getSignature();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.external.SignatureRctBulletproofs.serializeBinaryToWriter
    );
  }
  f = message.getFeeMapDigest_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional TxPrefix prefix = 1;
 * @return {?proto.external.TxPrefix}
 */
proto.external.Tx.prototype.getPrefix = function() {
  return /** @type{?proto.external.TxPrefix} */ (
    jspb.Message.getWrapperField(this, proto.external.TxPrefix, 1));
};


/**
 * @param {?proto.external.TxPrefix|undefined} value
 * @return {!proto.external.Tx} returns this
*/
proto.external.Tx.prototype.setPrefix = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.Tx} returns this
 */
proto.external.Tx.prototype.clearPrefix = function() {
  return this.setPrefix(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.Tx.prototype.hasPrefix = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SignatureRctBulletproofs signature = 2;
 * @return {?proto.external.SignatureRctBulletproofs}
 */
proto.external.Tx.prototype.getSignature = function() {
  return /** @type{?proto.external.SignatureRctBulletproofs} */ (
    jspb.Message.getWrapperField(this, proto.external.SignatureRctBulletproofs, 2));
};


/**
 * @param {?proto.external.SignatureRctBulletproofs|undefined} value
 * @return {!proto.external.Tx} returns this
*/
proto.external.Tx.prototype.setSignature = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.Tx} returns this
 */
proto.external.Tx.prototype.clearSignature = function() {
  return this.setSignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.Tx.prototype.hasSignature = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes fee_map_digest = 3;
 * @return {!(string|Uint8Array)}
 */
proto.external.Tx.prototype.getFeeMapDigest = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes fee_map_digest = 3;
 * This is a type-conversion wrapper around `getFeeMapDigest()`
 * @return {string}
 */
proto.external.Tx.prototype.getFeeMapDigest_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFeeMapDigest()));
};


/**
 * optional bytes fee_map_digest = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFeeMapDigest()`
 * @return {!Uint8Array}
 */
proto.external.Tx.prototype.getFeeMapDigest_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFeeMapDigest()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.external.Tx} returns this
 */
proto.external.Tx.prototype.setFeeMapDigest = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.external.TxHash.prototype.toObject = function(opt_includeInstance) {
  return proto.external.TxHash.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.external.TxHash} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.TxHash.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: msg.getHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.TxHash}
 */
proto.external.TxHash.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.external.TxHash;
  return proto.external.TxHash.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.TxHash} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.TxHash}
 */
proto.external.TxHash.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.TxHash.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.external.TxHash.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.TxHash} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.TxHash.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.external.TxHash.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes hash = 1;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.external.TxHash.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.external.TxHash.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.external.TxHash} returns this
 */
proto.external.TxHash.prototype.setHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.external.Receipt.oneofGroups_ = [[4,5]];

/**
 * @enum {number}
 */
proto.external.Receipt.MaskedAmountCase = {
  MASKED_AMOUNT_NOT_SET: 0,
  MASKED_AMOUNT_V1: 4,
  MASKED_AMOUNT_V2: 5
};

/**
 * @return {proto.external.Receipt.MaskedAmountCase}
 */
proto.external.Receipt.prototype.getMaskedAmountCase = function() {
  return /** @type {proto.external.Receipt.MaskedAmountCase} */(jspb.Message.computeOneofCase(this, proto.external.Receipt.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.external.Receipt.prototype.toObject = function(opt_includeInstance) {
  return proto.external.Receipt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.external.Receipt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.Receipt.toObject = function(includeInstance, msg) {
  var f, obj = {
    publicKey: (f = msg.getPublicKey()) && proto.external.CompressedRistretto.toObject(includeInstance, f),
    confirmation: (f = msg.getConfirmation()) && proto.external.TxOutConfirmationNumber.toObject(includeInstance, f),
    tombstoneBlock: jspb.Message.getFieldWithDefault(msg, 3, 0),
    maskedAmountV1: (f = msg.getMaskedAmountV1()) && proto.external.MaskedAmount.toObject(includeInstance, f),
    maskedAmountV2: (f = msg.getMaskedAmountV2()) && proto.external.MaskedAmount.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.Receipt}
 */
proto.external.Receipt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.external.Receipt;
  return proto.external.Receipt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.Receipt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.Receipt}
 */
proto.external.Receipt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.external.CompressedRistretto;
      reader.readMessage(value,proto.external.CompressedRistretto.deserializeBinaryFromReader);
      msg.setPublicKey(value);
      break;
    case 2:
      var value = new proto.external.TxOutConfirmationNumber;
      reader.readMessage(value,proto.external.TxOutConfirmationNumber.deserializeBinaryFromReader);
      msg.setConfirmation(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTombstoneBlock(value);
      break;
    case 4:
      var value = new proto.external.MaskedAmount;
      reader.readMessage(value,proto.external.MaskedAmount.deserializeBinaryFromReader);
      msg.setMaskedAmountV1(value);
      break;
    case 5:
      var value = new proto.external.MaskedAmount;
      reader.readMessage(value,proto.external.MaskedAmount.deserializeBinaryFromReader);
      msg.setMaskedAmountV2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.Receipt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.external.Receipt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.Receipt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.Receipt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublicKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.external.CompressedRistretto.serializeBinaryToWriter
    );
  }
  f = message.getConfirmation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.external.TxOutConfirmationNumber.serializeBinaryToWriter
    );
  }
  f = message.getTombstoneBlock();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getMaskedAmountV1();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.external.MaskedAmount.serializeBinaryToWriter
    );
  }
  f = message.getMaskedAmountV2();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.external.MaskedAmount.serializeBinaryToWriter
    );
  }
};


/**
 * optional CompressedRistretto public_key = 1;
 * @return {?proto.external.CompressedRistretto}
 */
proto.external.Receipt.prototype.getPublicKey = function() {
  return /** @type{?proto.external.CompressedRistretto} */ (
    jspb.Message.getWrapperField(this, proto.external.CompressedRistretto, 1));
};


/**
 * @param {?proto.external.CompressedRistretto|undefined} value
 * @return {!proto.external.Receipt} returns this
*/
proto.external.Receipt.prototype.setPublicKey = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.Receipt} returns this
 */
proto.external.Receipt.prototype.clearPublicKey = function() {
  return this.setPublicKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.Receipt.prototype.hasPublicKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TxOutConfirmationNumber confirmation = 2;
 * @return {?proto.external.TxOutConfirmationNumber}
 */
proto.external.Receipt.prototype.getConfirmation = function() {
  return /** @type{?proto.external.TxOutConfirmationNumber} */ (
    jspb.Message.getWrapperField(this, proto.external.TxOutConfirmationNumber, 2));
};


/**
 * @param {?proto.external.TxOutConfirmationNumber|undefined} value
 * @return {!proto.external.Receipt} returns this
*/
proto.external.Receipt.prototype.setConfirmation = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.Receipt} returns this
 */
proto.external.Receipt.prototype.clearConfirmation = function() {
  return this.setConfirmation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.Receipt.prototype.hasConfirmation = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 tombstone_block = 3;
 * @return {number}
 */
proto.external.Receipt.prototype.getTombstoneBlock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.external.Receipt} returns this
 */
proto.external.Receipt.prototype.setTombstoneBlock = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional MaskedAmount masked_amount_v1 = 4;
 * @return {?proto.external.MaskedAmount}
 */
proto.external.Receipt.prototype.getMaskedAmountV1 = function() {
  return /** @type{?proto.external.MaskedAmount} */ (
    jspb.Message.getWrapperField(this, proto.external.MaskedAmount, 4));
};


/**
 * @param {?proto.external.MaskedAmount|undefined} value
 * @return {!proto.external.Receipt} returns this
*/
proto.external.Receipt.prototype.setMaskedAmountV1 = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.external.Receipt.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.Receipt} returns this
 */
proto.external.Receipt.prototype.clearMaskedAmountV1 = function() {
  return this.setMaskedAmountV1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.Receipt.prototype.hasMaskedAmountV1 = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional MaskedAmount masked_amount_v2 = 5;
 * @return {?proto.external.MaskedAmount}
 */
proto.external.Receipt.prototype.getMaskedAmountV2 = function() {
  return /** @type{?proto.external.MaskedAmount} */ (
    jspb.Message.getWrapperField(this, proto.external.MaskedAmount, 5));
};


/**
 * @param {?proto.external.MaskedAmount|undefined} value
 * @return {!proto.external.Receipt} returns this
*/
proto.external.Receipt.prototype.setMaskedAmountV2 = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.external.Receipt.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.Receipt} returns this
 */
proto.external.Receipt.prototype.clearMaskedAmountV2 = function() {
  return this.setMaskedAmountV2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.Receipt.prototype.hasMaskedAmountV2 = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.external.VerificationSignature.prototype.toObject = function(opt_includeInstance) {
  return proto.external.VerificationSignature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.external.VerificationSignature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.VerificationSignature.toObject = function(includeInstance, msg) {
  var f, obj = {
    contents: msg.getContents_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.VerificationSignature}
 */
proto.external.VerificationSignature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.external.VerificationSignature;
  return proto.external.VerificationSignature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.VerificationSignature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.VerificationSignature}
 */
proto.external.VerificationSignature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.VerificationSignature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.external.VerificationSignature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.VerificationSignature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.VerificationSignature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContents_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes contents = 1;
 * @return {!(string|Uint8Array)}
 */
proto.external.VerificationSignature.prototype.getContents = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes contents = 1;
 * This is a type-conversion wrapper around `getContents()`
 * @return {string}
 */
proto.external.VerificationSignature.prototype.getContents_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContents()));
};


/**
 * optional bytes contents = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContents()`
 * @return {!Uint8Array}
 */
proto.external.VerificationSignature.prototype.getContents_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContents()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.external.VerificationSignature} returns this
 */
proto.external.VerificationSignature.prototype.setContents = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.external.VerificationReport.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.external.VerificationReport.prototype.toObject = function(opt_includeInstance) {
  return proto.external.VerificationReport.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.external.VerificationReport} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.VerificationReport.toObject = function(includeInstance, msg) {
  var f, obj = {
    sig: (f = msg.getSig()) && proto.external.VerificationSignature.toObject(includeInstance, f),
    chainList: msg.getChainList_asB64(),
    httpBody: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.VerificationReport}
 */
proto.external.VerificationReport.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.external.VerificationReport;
  return proto.external.VerificationReport.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.VerificationReport} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.VerificationReport}
 */
proto.external.VerificationReport.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.external.VerificationSignature;
      reader.readMessage(value,proto.external.VerificationSignature.deserializeBinaryFromReader);
      msg.setSig(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addChain(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setHttpBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.VerificationReport.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.external.VerificationReport.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.VerificationReport} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.VerificationReport.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.external.VerificationSignature.serializeBinaryToWriter
    );
  }
  f = message.getChainList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
  f = message.getHttpBody();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional VerificationSignature sig = 1;
 * @return {?proto.external.VerificationSignature}
 */
proto.external.VerificationReport.prototype.getSig = function() {
  return /** @type{?proto.external.VerificationSignature} */ (
    jspb.Message.getWrapperField(this, proto.external.VerificationSignature, 1));
};


/**
 * @param {?proto.external.VerificationSignature|undefined} value
 * @return {!proto.external.VerificationReport} returns this
*/
proto.external.VerificationReport.prototype.setSig = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.VerificationReport} returns this
 */
proto.external.VerificationReport.prototype.clearSig = function() {
  return this.setSig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.VerificationReport.prototype.hasSig = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated bytes chain = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.external.VerificationReport.prototype.getChainList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes chain = 2;
 * This is a type-conversion wrapper around `getChainList()`
 * @return {!Array<string>}
 */
proto.external.VerificationReport.prototype.getChainList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getChainList()));
};


/**
 * repeated bytes chain = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChainList()`
 * @return {!Array<!Uint8Array>}
 */
proto.external.VerificationReport.prototype.getChainList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getChainList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.external.VerificationReport} returns this
 */
proto.external.VerificationReport.prototype.setChainList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.external.VerificationReport} returns this
 */
proto.external.VerificationReport.prototype.addChain = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.external.VerificationReport} returns this
 */
proto.external.VerificationReport.prototype.clearChainList = function() {
  return this.setChainList([]);
};


/**
 * optional string http_body = 3;
 * @return {string}
 */
proto.external.VerificationReport.prototype.getHttpBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.external.VerificationReport} returns this
 */
proto.external.VerificationReport.prototype.setHttpBody = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.external.MintTxPrefix.prototype.toObject = function(opt_includeInstance) {
  return proto.external.MintTxPrefix.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.external.MintTxPrefix} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.MintTxPrefix.toObject = function(includeInstance, msg) {
  var f, obj = {
    tokenId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    viewPublicKey: (f = msg.getViewPublicKey()) && proto.external.CompressedRistretto.toObject(includeInstance, f),
    spendPublicKey: (f = msg.getSpendPublicKey()) && proto.external.CompressedRistretto.toObject(includeInstance, f),
    nonce: msg.getNonce_asB64(),
    tombstoneBlock: jspb.Message.getFieldWithDefault(msg, 6, 0),
    eFogHint: (f = msg.getEFogHint()) && proto.external.EncryptedFogHint.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.MintTxPrefix}
 */
proto.external.MintTxPrefix.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.external.MintTxPrefix;
  return proto.external.MintTxPrefix.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.MintTxPrefix} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.MintTxPrefix}
 */
proto.external.MintTxPrefix.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTokenId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmount(value);
      break;
    case 3:
      var value = new proto.external.CompressedRistretto;
      reader.readMessage(value,proto.external.CompressedRistretto.deserializeBinaryFromReader);
      msg.setViewPublicKey(value);
      break;
    case 4:
      var value = new proto.external.CompressedRistretto;
      reader.readMessage(value,proto.external.CompressedRistretto.deserializeBinaryFromReader);
      msg.setSpendPublicKey(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNonce(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTombstoneBlock(value);
      break;
    case 7:
      var value = new proto.external.EncryptedFogHint;
      reader.readMessage(value,proto.external.EncryptedFogHint.deserializeBinaryFromReader);
      msg.setEFogHint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.MintTxPrefix.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.external.MintTxPrefix.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.MintTxPrefix} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.MintTxPrefix.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTokenId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getViewPublicKey();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.external.CompressedRistretto.serializeBinaryToWriter
    );
  }
  f = message.getSpendPublicKey();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.external.CompressedRistretto.serializeBinaryToWriter
    );
  }
  f = message.getNonce_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getTombstoneBlock();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getEFogHint();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.external.EncryptedFogHint.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 token_id = 1;
 * @return {number}
 */
proto.external.MintTxPrefix.prototype.getTokenId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.external.MintTxPrefix} returns this
 */
proto.external.MintTxPrefix.prototype.setTokenId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 amount = 2;
 * @return {number}
 */
proto.external.MintTxPrefix.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.external.MintTxPrefix} returns this
 */
proto.external.MintTxPrefix.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional CompressedRistretto view_public_key = 3;
 * @return {?proto.external.CompressedRistretto}
 */
proto.external.MintTxPrefix.prototype.getViewPublicKey = function() {
  return /** @type{?proto.external.CompressedRistretto} */ (
    jspb.Message.getWrapperField(this, proto.external.CompressedRistretto, 3));
};


/**
 * @param {?proto.external.CompressedRistretto|undefined} value
 * @return {!proto.external.MintTxPrefix} returns this
*/
proto.external.MintTxPrefix.prototype.setViewPublicKey = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.MintTxPrefix} returns this
 */
proto.external.MintTxPrefix.prototype.clearViewPublicKey = function() {
  return this.setViewPublicKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.MintTxPrefix.prototype.hasViewPublicKey = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional CompressedRistretto spend_public_key = 4;
 * @return {?proto.external.CompressedRistretto}
 */
proto.external.MintTxPrefix.prototype.getSpendPublicKey = function() {
  return /** @type{?proto.external.CompressedRistretto} */ (
    jspb.Message.getWrapperField(this, proto.external.CompressedRistretto, 4));
};


/**
 * @param {?proto.external.CompressedRistretto|undefined} value
 * @return {!proto.external.MintTxPrefix} returns this
*/
proto.external.MintTxPrefix.prototype.setSpendPublicKey = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.MintTxPrefix} returns this
 */
proto.external.MintTxPrefix.prototype.clearSpendPublicKey = function() {
  return this.setSpendPublicKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.MintTxPrefix.prototype.hasSpendPublicKey = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bytes nonce = 5;
 * @return {!(string|Uint8Array)}
 */
proto.external.MintTxPrefix.prototype.getNonce = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes nonce = 5;
 * This is a type-conversion wrapper around `getNonce()`
 * @return {string}
 */
proto.external.MintTxPrefix.prototype.getNonce_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNonce()));
};


/**
 * optional bytes nonce = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNonce()`
 * @return {!Uint8Array}
 */
proto.external.MintTxPrefix.prototype.getNonce_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNonce()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.external.MintTxPrefix} returns this
 */
proto.external.MintTxPrefix.prototype.setNonce = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional uint64 tombstone_block = 6;
 * @return {number}
 */
proto.external.MintTxPrefix.prototype.getTombstoneBlock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.external.MintTxPrefix} returns this
 */
proto.external.MintTxPrefix.prototype.setTombstoneBlock = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional EncryptedFogHint e_fog_hint = 7;
 * @return {?proto.external.EncryptedFogHint}
 */
proto.external.MintTxPrefix.prototype.getEFogHint = function() {
  return /** @type{?proto.external.EncryptedFogHint} */ (
    jspb.Message.getWrapperField(this, proto.external.EncryptedFogHint, 7));
};


/**
 * @param {?proto.external.EncryptedFogHint|undefined} value
 * @return {!proto.external.MintTxPrefix} returns this
*/
proto.external.MintTxPrefix.prototype.setEFogHint = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.MintTxPrefix} returns this
 */
proto.external.MintTxPrefix.prototype.clearEFogHint = function() {
  return this.setEFogHint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.MintTxPrefix.prototype.hasEFogHint = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.external.MintTx.prototype.toObject = function(opt_includeInstance) {
  return proto.external.MintTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.external.MintTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.MintTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    prefix: (f = msg.getPrefix()) && proto.external.MintTxPrefix.toObject(includeInstance, f),
    signature: (f = msg.getSignature()) && proto.external.Ed25519MultiSig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.MintTx}
 */
proto.external.MintTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.external.MintTx;
  return proto.external.MintTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.MintTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.MintTx}
 */
proto.external.MintTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.external.MintTxPrefix;
      reader.readMessage(value,proto.external.MintTxPrefix.deserializeBinaryFromReader);
      msg.setPrefix(value);
      break;
    case 2:
      var value = new proto.external.Ed25519MultiSig;
      reader.readMessage(value,proto.external.Ed25519MultiSig.deserializeBinaryFromReader);
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.MintTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.external.MintTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.MintTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.MintTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrefix();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.external.MintTxPrefix.serializeBinaryToWriter
    );
  }
  f = message.getSignature();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.external.Ed25519MultiSig.serializeBinaryToWriter
    );
  }
};


/**
 * optional MintTxPrefix prefix = 1;
 * @return {?proto.external.MintTxPrefix}
 */
proto.external.MintTx.prototype.getPrefix = function() {
  return /** @type{?proto.external.MintTxPrefix} */ (
    jspb.Message.getWrapperField(this, proto.external.MintTxPrefix, 1));
};


/**
 * @param {?proto.external.MintTxPrefix|undefined} value
 * @return {!proto.external.MintTx} returns this
*/
proto.external.MintTx.prototype.setPrefix = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.MintTx} returns this
 */
proto.external.MintTx.prototype.clearPrefix = function() {
  return this.setPrefix(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.MintTx.prototype.hasPrefix = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Ed25519MultiSig signature = 2;
 * @return {?proto.external.Ed25519MultiSig}
 */
proto.external.MintTx.prototype.getSignature = function() {
  return /** @type{?proto.external.Ed25519MultiSig} */ (
    jspb.Message.getWrapperField(this, proto.external.Ed25519MultiSig, 2));
};


/**
 * @param {?proto.external.Ed25519MultiSig|undefined} value
 * @return {!proto.external.MintTx} returns this
*/
proto.external.MintTx.prototype.setSignature = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.MintTx} returns this
 */
proto.external.MintTx.prototype.clearSignature = function() {
  return this.setSignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.MintTx.prototype.hasSignature = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.external.MintConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.external.MintConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.external.MintConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.MintConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    tokenId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    signerSet: (f = msg.getSignerSet()) && proto.external.Ed25519SignerSet.toObject(includeInstance, f),
    mintLimit: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.MintConfig}
 */
proto.external.MintConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.external.MintConfig;
  return proto.external.MintConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.MintConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.MintConfig}
 */
proto.external.MintConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTokenId(value);
      break;
    case 2:
      var value = new proto.external.Ed25519SignerSet;
      reader.readMessage(value,proto.external.Ed25519SignerSet.deserializeBinaryFromReader);
      msg.setSignerSet(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMintLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.MintConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.external.MintConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.MintConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.MintConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTokenId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getSignerSet();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.external.Ed25519SignerSet.serializeBinaryToWriter
    );
  }
  f = message.getMintLimit();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional uint64 token_id = 1;
 * @return {number}
 */
proto.external.MintConfig.prototype.getTokenId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.external.MintConfig} returns this
 */
proto.external.MintConfig.prototype.setTokenId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Ed25519SignerSet signer_set = 2;
 * @return {?proto.external.Ed25519SignerSet}
 */
proto.external.MintConfig.prototype.getSignerSet = function() {
  return /** @type{?proto.external.Ed25519SignerSet} */ (
    jspb.Message.getWrapperField(this, proto.external.Ed25519SignerSet, 2));
};


/**
 * @param {?proto.external.Ed25519SignerSet|undefined} value
 * @return {!proto.external.MintConfig} returns this
*/
proto.external.MintConfig.prototype.setSignerSet = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.MintConfig} returns this
 */
proto.external.MintConfig.prototype.clearSignerSet = function() {
  return this.setSignerSet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.MintConfig.prototype.hasSignerSet = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 mint_limit = 3;
 * @return {number}
 */
proto.external.MintConfig.prototype.getMintLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.external.MintConfig} returns this
 */
proto.external.MintConfig.prototype.setMintLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.external.MintConfigTxPrefix.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.external.MintConfigTxPrefix.prototype.toObject = function(opt_includeInstance) {
  return proto.external.MintConfigTxPrefix.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.external.MintConfigTxPrefix} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.MintConfigTxPrefix.toObject = function(includeInstance, msg) {
  var f, obj = {
    tokenId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    configsList: jspb.Message.toObjectList(msg.getConfigsList(),
    proto.external.MintConfig.toObject, includeInstance),
    nonce: msg.getNonce_asB64(),
    tombstoneBlock: jspb.Message.getFieldWithDefault(msg, 4, 0),
    totalMintLimit: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.MintConfigTxPrefix}
 */
proto.external.MintConfigTxPrefix.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.external.MintConfigTxPrefix;
  return proto.external.MintConfigTxPrefix.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.MintConfigTxPrefix} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.MintConfigTxPrefix}
 */
proto.external.MintConfigTxPrefix.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTokenId(value);
      break;
    case 2:
      var value = new proto.external.MintConfig;
      reader.readMessage(value,proto.external.MintConfig.deserializeBinaryFromReader);
      msg.addConfigs(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNonce(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTombstoneBlock(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalMintLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.MintConfigTxPrefix.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.external.MintConfigTxPrefix.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.MintConfigTxPrefix} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.MintConfigTxPrefix.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTokenId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getConfigsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.external.MintConfig.serializeBinaryToWriter
    );
  }
  f = message.getNonce_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getTombstoneBlock();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getTotalMintLimit();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional uint64 token_id = 1;
 * @return {number}
 */
proto.external.MintConfigTxPrefix.prototype.getTokenId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.external.MintConfigTxPrefix} returns this
 */
proto.external.MintConfigTxPrefix.prototype.setTokenId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated MintConfig configs = 2;
 * @return {!Array<!proto.external.MintConfig>}
 */
proto.external.MintConfigTxPrefix.prototype.getConfigsList = function() {
  return /** @type{!Array<!proto.external.MintConfig>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.external.MintConfig, 2));
};


/**
 * @param {!Array<!proto.external.MintConfig>} value
 * @return {!proto.external.MintConfigTxPrefix} returns this
*/
proto.external.MintConfigTxPrefix.prototype.setConfigsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.external.MintConfig=} opt_value
 * @param {number=} opt_index
 * @return {!proto.external.MintConfig}
 */
proto.external.MintConfigTxPrefix.prototype.addConfigs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.external.MintConfig, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.external.MintConfigTxPrefix} returns this
 */
proto.external.MintConfigTxPrefix.prototype.clearConfigsList = function() {
  return this.setConfigsList([]);
};


/**
 * optional bytes nonce = 3;
 * @return {!(string|Uint8Array)}
 */
proto.external.MintConfigTxPrefix.prototype.getNonce = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes nonce = 3;
 * This is a type-conversion wrapper around `getNonce()`
 * @return {string}
 */
proto.external.MintConfigTxPrefix.prototype.getNonce_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNonce()));
};


/**
 * optional bytes nonce = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNonce()`
 * @return {!Uint8Array}
 */
proto.external.MintConfigTxPrefix.prototype.getNonce_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNonce()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.external.MintConfigTxPrefix} returns this
 */
proto.external.MintConfigTxPrefix.prototype.setNonce = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional uint64 tombstone_block = 4;
 * @return {number}
 */
proto.external.MintConfigTxPrefix.prototype.getTombstoneBlock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.external.MintConfigTxPrefix} returns this
 */
proto.external.MintConfigTxPrefix.prototype.setTombstoneBlock = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 total_mint_limit = 5;
 * @return {number}
 */
proto.external.MintConfigTxPrefix.prototype.getTotalMintLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.external.MintConfigTxPrefix} returns this
 */
proto.external.MintConfigTxPrefix.prototype.setTotalMintLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.external.MintConfigTx.prototype.toObject = function(opt_includeInstance) {
  return proto.external.MintConfigTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.external.MintConfigTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.MintConfigTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    prefix: (f = msg.getPrefix()) && proto.external.MintConfigTxPrefix.toObject(includeInstance, f),
    signature: (f = msg.getSignature()) && proto.external.Ed25519MultiSig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.MintConfigTx}
 */
proto.external.MintConfigTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.external.MintConfigTx;
  return proto.external.MintConfigTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.MintConfigTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.MintConfigTx}
 */
proto.external.MintConfigTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.external.MintConfigTxPrefix;
      reader.readMessage(value,proto.external.MintConfigTxPrefix.deserializeBinaryFromReader);
      msg.setPrefix(value);
      break;
    case 2:
      var value = new proto.external.Ed25519MultiSig;
      reader.readMessage(value,proto.external.Ed25519MultiSig.deserializeBinaryFromReader);
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.MintConfigTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.external.MintConfigTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.MintConfigTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.MintConfigTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrefix();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.external.MintConfigTxPrefix.serializeBinaryToWriter
    );
  }
  f = message.getSignature();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.external.Ed25519MultiSig.serializeBinaryToWriter
    );
  }
};


/**
 * optional MintConfigTxPrefix prefix = 1;
 * @return {?proto.external.MintConfigTxPrefix}
 */
proto.external.MintConfigTx.prototype.getPrefix = function() {
  return /** @type{?proto.external.MintConfigTxPrefix} */ (
    jspb.Message.getWrapperField(this, proto.external.MintConfigTxPrefix, 1));
};


/**
 * @param {?proto.external.MintConfigTxPrefix|undefined} value
 * @return {!proto.external.MintConfigTx} returns this
*/
proto.external.MintConfigTx.prototype.setPrefix = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.MintConfigTx} returns this
 */
proto.external.MintConfigTx.prototype.clearPrefix = function() {
  return this.setPrefix(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.MintConfigTx.prototype.hasPrefix = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Ed25519MultiSig signature = 2;
 * @return {?proto.external.Ed25519MultiSig}
 */
proto.external.MintConfigTx.prototype.getSignature = function() {
  return /** @type{?proto.external.Ed25519MultiSig} */ (
    jspb.Message.getWrapperField(this, proto.external.Ed25519MultiSig, 2));
};


/**
 * @param {?proto.external.Ed25519MultiSig|undefined} value
 * @return {!proto.external.MintConfigTx} returns this
*/
proto.external.MintConfigTx.prototype.setSignature = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.MintConfigTx} returns this
 */
proto.external.MintConfigTx.prototype.clearSignature = function() {
  return this.setSignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.MintConfigTx.prototype.hasSignature = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.external.ValidatedMintConfigTx.prototype.toObject = function(opt_includeInstance) {
  return proto.external.ValidatedMintConfigTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.external.ValidatedMintConfigTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.ValidatedMintConfigTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    mintConfigTx: (f = msg.getMintConfigTx()) && proto.external.MintConfigTx.toObject(includeInstance, f),
    signerSet: (f = msg.getSignerSet()) && proto.external.Ed25519SignerSet.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.ValidatedMintConfigTx}
 */
proto.external.ValidatedMintConfigTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.external.ValidatedMintConfigTx;
  return proto.external.ValidatedMintConfigTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.ValidatedMintConfigTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.ValidatedMintConfigTx}
 */
proto.external.ValidatedMintConfigTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.external.MintConfigTx;
      reader.readMessage(value,proto.external.MintConfigTx.deserializeBinaryFromReader);
      msg.setMintConfigTx(value);
      break;
    case 2:
      var value = new proto.external.Ed25519SignerSet;
      reader.readMessage(value,proto.external.Ed25519SignerSet.deserializeBinaryFromReader);
      msg.setSignerSet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.ValidatedMintConfigTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.external.ValidatedMintConfigTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.ValidatedMintConfigTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.ValidatedMintConfigTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMintConfigTx();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.external.MintConfigTx.serializeBinaryToWriter
    );
  }
  f = message.getSignerSet();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.external.Ed25519SignerSet.serializeBinaryToWriter
    );
  }
};


/**
 * optional MintConfigTx mint_config_tx = 1;
 * @return {?proto.external.MintConfigTx}
 */
proto.external.ValidatedMintConfigTx.prototype.getMintConfigTx = function() {
  return /** @type{?proto.external.MintConfigTx} */ (
    jspb.Message.getWrapperField(this, proto.external.MintConfigTx, 1));
};


/**
 * @param {?proto.external.MintConfigTx|undefined} value
 * @return {!proto.external.ValidatedMintConfigTx} returns this
*/
proto.external.ValidatedMintConfigTx.prototype.setMintConfigTx = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.ValidatedMintConfigTx} returns this
 */
proto.external.ValidatedMintConfigTx.prototype.clearMintConfigTx = function() {
  return this.setMintConfigTx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.ValidatedMintConfigTx.prototype.hasMintConfigTx = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Ed25519SignerSet signer_set = 2;
 * @return {?proto.external.Ed25519SignerSet}
 */
proto.external.ValidatedMintConfigTx.prototype.getSignerSet = function() {
  return /** @type{?proto.external.Ed25519SignerSet} */ (
    jspb.Message.getWrapperField(this, proto.external.Ed25519SignerSet, 2));
};


/**
 * @param {?proto.external.Ed25519SignerSet|undefined} value
 * @return {!proto.external.ValidatedMintConfigTx} returns this
*/
proto.external.ValidatedMintConfigTx.prototype.setSignerSet = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.ValidatedMintConfigTx} returns this
 */
proto.external.ValidatedMintConfigTx.prototype.clearSignerSet = function() {
  return this.setSignerSet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.ValidatedMintConfigTx.prototype.hasSignerSet = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.external.UnmaskedAmount.prototype.toObject = function(opt_includeInstance) {
  return proto.external.UnmaskedAmount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.external.UnmaskedAmount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.UnmaskedAmount.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tokenId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    blinding: (f = msg.getBlinding()) && proto.external.CurveScalar.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.UnmaskedAmount}
 */
proto.external.UnmaskedAmount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.external.UnmaskedAmount;
  return proto.external.UnmaskedAmount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.UnmaskedAmount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.UnmaskedAmount}
 */
proto.external.UnmaskedAmount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setTokenId(value);
      break;
    case 3:
      var value = new proto.external.CurveScalar;
      reader.readMessage(value,proto.external.CurveScalar.deserializeBinaryFromReader);
      msg.setBlinding(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.UnmaskedAmount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.external.UnmaskedAmount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.UnmaskedAmount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.UnmaskedAmount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0) {
    writer.writeFixed64(
      1,
      f
    );
  }
  f = message.getTokenId();
  if (f !== 0) {
    writer.writeFixed64(
      2,
      f
    );
  }
  f = message.getBlinding();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.external.CurveScalar.serializeBinaryToWriter
    );
  }
};


/**
 * optional fixed64 value = 1;
 * @return {number}
 */
proto.external.UnmaskedAmount.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.external.UnmaskedAmount} returns this
 */
proto.external.UnmaskedAmount.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed64 token_id = 2;
 * @return {number}
 */
proto.external.UnmaskedAmount.prototype.getTokenId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.external.UnmaskedAmount} returns this
 */
proto.external.UnmaskedAmount.prototype.setTokenId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional CurveScalar blinding = 3;
 * @return {?proto.external.CurveScalar}
 */
proto.external.UnmaskedAmount.prototype.getBlinding = function() {
  return /** @type{?proto.external.CurveScalar} */ (
    jspb.Message.getWrapperField(this, proto.external.CurveScalar, 3));
};


/**
 * @param {?proto.external.CurveScalar|undefined} value
 * @return {!proto.external.UnmaskedAmount} returns this
*/
proto.external.UnmaskedAmount.prototype.setBlinding = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.UnmaskedAmount} returns this
 */
proto.external.UnmaskedAmount.prototype.clearBlinding = function() {
  return this.setBlinding(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.UnmaskedAmount.prototype.hasBlinding = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.external.SignedContingentInput.repeatedFields_ = [5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.external.SignedContingentInput.prototype.toObject = function(opt_includeInstance) {
  return proto.external.SignedContingentInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.external.SignedContingentInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.SignedContingentInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockVersion: jspb.Message.getFieldWithDefault(msg, 1, 0),
    txIn: (f = msg.getTxIn()) && proto.external.TxIn.toObject(includeInstance, f),
    mlsag: (f = msg.getMlsag()) && proto.external.RingMLSAG.toObject(includeInstance, f),
    pseudoOutputAmount: (f = msg.getPseudoOutputAmount()) && proto.external.UnmaskedAmount.toObject(includeInstance, f),
    requiredOutputAmountsList: jspb.Message.toObjectList(msg.getRequiredOutputAmountsList(),
    proto.external.UnmaskedAmount.toObject, includeInstance),
    txOutGlobalIndicesList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.SignedContingentInput}
 */
proto.external.SignedContingentInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.external.SignedContingentInput;
  return proto.external.SignedContingentInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.SignedContingentInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.SignedContingentInput}
 */
proto.external.SignedContingentInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBlockVersion(value);
      break;
    case 2:
      var value = new proto.external.TxIn;
      reader.readMessage(value,proto.external.TxIn.deserializeBinaryFromReader);
      msg.setTxIn(value);
      break;
    case 3:
      var value = new proto.external.RingMLSAG;
      reader.readMessage(value,proto.external.RingMLSAG.deserializeBinaryFromReader);
      msg.setMlsag(value);
      break;
    case 4:
      var value = new proto.external.UnmaskedAmount;
      reader.readMessage(value,proto.external.UnmaskedAmount.deserializeBinaryFromReader);
      msg.setPseudoOutputAmount(value);
      break;
    case 5:
      var value = new proto.external.UnmaskedAmount;
      reader.readMessage(value,proto.external.UnmaskedAmount.deserializeBinaryFromReader);
      msg.addRequiredOutputAmounts(value);
      break;
    case 6:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFixed64() : [reader.readFixed64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addTxOutGlobalIndices(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.SignedContingentInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.external.SignedContingentInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.SignedContingentInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.SignedContingentInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockVersion();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getTxIn();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.external.TxIn.serializeBinaryToWriter
    );
  }
  f = message.getMlsag();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.external.RingMLSAG.serializeBinaryToWriter
    );
  }
  f = message.getPseudoOutputAmount();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.external.UnmaskedAmount.serializeBinaryToWriter
    );
  }
  f = message.getRequiredOutputAmountsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.external.UnmaskedAmount.serializeBinaryToWriter
    );
  }
  f = message.getTxOutGlobalIndicesList();
  if (f.length > 0) {
    writer.writePackedFixed64(
      6,
      f
    );
  }
};


/**
 * optional uint32 block_version = 1;
 * @return {number}
 */
proto.external.SignedContingentInput.prototype.getBlockVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.external.SignedContingentInput} returns this
 */
proto.external.SignedContingentInput.prototype.setBlockVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional TxIn tx_in = 2;
 * @return {?proto.external.TxIn}
 */
proto.external.SignedContingentInput.prototype.getTxIn = function() {
  return /** @type{?proto.external.TxIn} */ (
    jspb.Message.getWrapperField(this, proto.external.TxIn, 2));
};


/**
 * @param {?proto.external.TxIn|undefined} value
 * @return {!proto.external.SignedContingentInput} returns this
*/
proto.external.SignedContingentInput.prototype.setTxIn = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.SignedContingentInput} returns this
 */
proto.external.SignedContingentInput.prototype.clearTxIn = function() {
  return this.setTxIn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.SignedContingentInput.prototype.hasTxIn = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RingMLSAG mlsag = 3;
 * @return {?proto.external.RingMLSAG}
 */
proto.external.SignedContingentInput.prototype.getMlsag = function() {
  return /** @type{?proto.external.RingMLSAG} */ (
    jspb.Message.getWrapperField(this, proto.external.RingMLSAG, 3));
};


/**
 * @param {?proto.external.RingMLSAG|undefined} value
 * @return {!proto.external.SignedContingentInput} returns this
*/
proto.external.SignedContingentInput.prototype.setMlsag = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.SignedContingentInput} returns this
 */
proto.external.SignedContingentInput.prototype.clearMlsag = function() {
  return this.setMlsag(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.SignedContingentInput.prototype.hasMlsag = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional UnmaskedAmount pseudo_output_amount = 4;
 * @return {?proto.external.UnmaskedAmount}
 */
proto.external.SignedContingentInput.prototype.getPseudoOutputAmount = function() {
  return /** @type{?proto.external.UnmaskedAmount} */ (
    jspb.Message.getWrapperField(this, proto.external.UnmaskedAmount, 4));
};


/**
 * @param {?proto.external.UnmaskedAmount|undefined} value
 * @return {!proto.external.SignedContingentInput} returns this
*/
proto.external.SignedContingentInput.prototype.setPseudoOutputAmount = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.SignedContingentInput} returns this
 */
proto.external.SignedContingentInput.prototype.clearPseudoOutputAmount = function() {
  return this.setPseudoOutputAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.SignedContingentInput.prototype.hasPseudoOutputAmount = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated UnmaskedAmount required_output_amounts = 5;
 * @return {!Array<!proto.external.UnmaskedAmount>}
 */
proto.external.SignedContingentInput.prototype.getRequiredOutputAmountsList = function() {
  return /** @type{!Array<!proto.external.UnmaskedAmount>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.external.UnmaskedAmount, 5));
};


/**
 * @param {!Array<!proto.external.UnmaskedAmount>} value
 * @return {!proto.external.SignedContingentInput} returns this
*/
proto.external.SignedContingentInput.prototype.setRequiredOutputAmountsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.external.UnmaskedAmount=} opt_value
 * @param {number=} opt_index
 * @return {!proto.external.UnmaskedAmount}
 */
proto.external.SignedContingentInput.prototype.addRequiredOutputAmounts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.external.UnmaskedAmount, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.external.SignedContingentInput} returns this
 */
proto.external.SignedContingentInput.prototype.clearRequiredOutputAmountsList = function() {
  return this.setRequiredOutputAmountsList([]);
};


/**
 * repeated fixed64 tx_out_global_indices = 6;
 * @return {!Array<number>}
 */
proto.external.SignedContingentInput.prototype.getTxOutGlobalIndicesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.external.SignedContingentInput} returns this
 */
proto.external.SignedContingentInput.prototype.setTxOutGlobalIndicesList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.external.SignedContingentInput} returns this
 */
proto.external.SignedContingentInput.prototype.addTxOutGlobalIndices = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.external.SignedContingentInput} returns this
 */
proto.external.SignedContingentInput.prototype.clearTxOutGlobalIndicesList = function() {
  return this.setTxOutGlobalIndicesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.external.Amount.prototype.toObject = function(opt_includeInstance) {
  return proto.external.Amount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.external.Amount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.Amount.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tokenId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.Amount}
 */
proto.external.Amount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.external.Amount;
  return proto.external.Amount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.Amount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.Amount}
 */
proto.external.Amount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setTokenId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.Amount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.external.Amount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.Amount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.Amount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0) {
    writer.writeFixed64(
      1,
      f
    );
  }
  f = message.getTokenId();
  if (f !== 0) {
    writer.writeFixed64(
      2,
      f
    );
  }
};


/**
 * optional fixed64 value = 1;
 * @return {number}
 */
proto.external.Amount.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.external.Amount} returns this
 */
proto.external.Amount.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed64 token_id = 2;
 * @return {number}
 */
proto.external.Amount.prototype.getTokenId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.external.Amount} returns this
 */
proto.external.Amount.prototype.setTokenId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.external.OutputSecret.prototype.toObject = function(opt_includeInstance) {
  return proto.external.OutputSecret.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.external.OutputSecret} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.OutputSecret.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: (f = msg.getAmount()) && proto.external.Amount.toObject(includeInstance, f),
    blinding: (f = msg.getBlinding()) && proto.external.CurveScalar.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.OutputSecret}
 */
proto.external.OutputSecret.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.external.OutputSecret;
  return proto.external.OutputSecret.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.OutputSecret} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.OutputSecret}
 */
proto.external.OutputSecret.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.external.Amount;
      reader.readMessage(value,proto.external.Amount.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    case 2:
      var value = new proto.external.CurveScalar;
      reader.readMessage(value,proto.external.CurveScalar.deserializeBinaryFromReader);
      msg.setBlinding(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.OutputSecret.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.external.OutputSecret.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.OutputSecret} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.OutputSecret.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.external.Amount.serializeBinaryToWriter
    );
  }
  f = message.getBlinding();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.external.CurveScalar.serializeBinaryToWriter
    );
  }
};


/**
 * optional Amount amount = 1;
 * @return {?proto.external.Amount}
 */
proto.external.OutputSecret.prototype.getAmount = function() {
  return /** @type{?proto.external.Amount} */ (
    jspb.Message.getWrapperField(this, proto.external.Amount, 1));
};


/**
 * @param {?proto.external.Amount|undefined} value
 * @return {!proto.external.OutputSecret} returns this
*/
proto.external.OutputSecret.prototype.setAmount = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.OutputSecret} returns this
 */
proto.external.OutputSecret.prototype.clearAmount = function() {
  return this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.OutputSecret.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CurveScalar blinding = 2;
 * @return {?proto.external.CurveScalar}
 */
proto.external.OutputSecret.prototype.getBlinding = function() {
  return /** @type{?proto.external.CurveScalar} */ (
    jspb.Message.getWrapperField(this, proto.external.CurveScalar, 2));
};


/**
 * @param {?proto.external.CurveScalar|undefined} value
 * @return {!proto.external.OutputSecret} returns this
*/
proto.external.OutputSecret.prototype.setBlinding = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.OutputSecret} returns this
 */
proto.external.OutputSecret.prototype.clearBlinding = function() {
  return this.setBlinding(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.OutputSecret.prototype.hasBlinding = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.external.InputSecret.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.external.InputSecret.OnetimeKeyDeriveDataCase = {
  ONETIME_KEY_DERIVE_DATA_NOT_SET: 0,
  ONETIME_PRIVATE_KEY: 1,
  SUBADDRESS_INDEX: 2
};

/**
 * @return {proto.external.InputSecret.OnetimeKeyDeriveDataCase}
 */
proto.external.InputSecret.prototype.getOnetimeKeyDeriveDataCase = function() {
  return /** @type {proto.external.InputSecret.OnetimeKeyDeriveDataCase} */(jspb.Message.computeOneofCase(this, proto.external.InputSecret.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.external.InputSecret.prototype.toObject = function(opt_includeInstance) {
  return proto.external.InputSecret.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.external.InputSecret} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.InputSecret.toObject = function(includeInstance, msg) {
  var f, obj = {
    onetimePrivateKey: (f = msg.getOnetimePrivateKey()) && proto.external.RistrettoPrivate.toObject(includeInstance, f),
    subaddressIndex: jspb.Message.getFieldWithDefault(msg, 2, 0),
    amount: (f = msg.getAmount()) && proto.external.Amount.toObject(includeInstance, f),
    blinding: (f = msg.getBlinding()) && proto.external.CurveScalar.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.InputSecret}
 */
proto.external.InputSecret.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.external.InputSecret;
  return proto.external.InputSecret.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.InputSecret} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.InputSecret}
 */
proto.external.InputSecret.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.external.RistrettoPrivate;
      reader.readMessage(value,proto.external.RistrettoPrivate.deserializeBinaryFromReader);
      msg.setOnetimePrivateKey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setSubaddressIndex(value);
      break;
    case 3:
      var value = new proto.external.Amount;
      reader.readMessage(value,proto.external.Amount.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    case 4:
      var value = new proto.external.CurveScalar;
      reader.readMessage(value,proto.external.CurveScalar.deserializeBinaryFromReader);
      msg.setBlinding(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.InputSecret.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.external.InputSecret.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.InputSecret} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.InputSecret.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOnetimePrivateKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.external.RistrettoPrivate.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFixed64(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.external.Amount.serializeBinaryToWriter
    );
  }
  f = message.getBlinding();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.external.CurveScalar.serializeBinaryToWriter
    );
  }
};


/**
 * optional RistrettoPrivate onetime_private_key = 1;
 * @return {?proto.external.RistrettoPrivate}
 */
proto.external.InputSecret.prototype.getOnetimePrivateKey = function() {
  return /** @type{?proto.external.RistrettoPrivate} */ (
    jspb.Message.getWrapperField(this, proto.external.RistrettoPrivate, 1));
};


/**
 * @param {?proto.external.RistrettoPrivate|undefined} value
 * @return {!proto.external.InputSecret} returns this
*/
proto.external.InputSecret.prototype.setOnetimePrivateKey = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.external.InputSecret.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.InputSecret} returns this
 */
proto.external.InputSecret.prototype.clearOnetimePrivateKey = function() {
  return this.setOnetimePrivateKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.InputSecret.prototype.hasOnetimePrivateKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional fixed64 subaddress_index = 2;
 * @return {number}
 */
proto.external.InputSecret.prototype.getSubaddressIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.external.InputSecret} returns this
 */
proto.external.InputSecret.prototype.setSubaddressIndex = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.external.InputSecret.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.external.InputSecret} returns this
 */
proto.external.InputSecret.prototype.clearSubaddressIndex = function() {
  return jspb.Message.setOneofField(this, 2, proto.external.InputSecret.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.InputSecret.prototype.hasSubaddressIndex = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Amount amount = 3;
 * @return {?proto.external.Amount}
 */
proto.external.InputSecret.prototype.getAmount = function() {
  return /** @type{?proto.external.Amount} */ (
    jspb.Message.getWrapperField(this, proto.external.Amount, 3));
};


/**
 * @param {?proto.external.Amount|undefined} value
 * @return {!proto.external.InputSecret} returns this
*/
proto.external.InputSecret.prototype.setAmount = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.InputSecret} returns this
 */
proto.external.InputSecret.prototype.clearAmount = function() {
  return this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.InputSecret.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional CurveScalar blinding = 4;
 * @return {?proto.external.CurveScalar}
 */
proto.external.InputSecret.prototype.getBlinding = function() {
  return /** @type{?proto.external.CurveScalar} */ (
    jspb.Message.getWrapperField(this, proto.external.CurveScalar, 4));
};


/**
 * @param {?proto.external.CurveScalar|undefined} value
 * @return {!proto.external.InputSecret} returns this
*/
proto.external.InputSecret.prototype.setBlinding = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.InputSecret} returns this
 */
proto.external.InputSecret.prototype.clearBlinding = function() {
  return this.setBlinding(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.InputSecret.prototype.hasBlinding = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.external.ReducedTxOut.prototype.toObject = function(opt_includeInstance) {
  return proto.external.ReducedTxOut.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.external.ReducedTxOut} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.ReducedTxOut.toObject = function(includeInstance, msg) {
  var f, obj = {
    publicKey: (f = msg.getPublicKey()) && proto.external.CompressedRistretto.toObject(includeInstance, f),
    targetKey: (f = msg.getTargetKey()) && proto.external.CompressedRistretto.toObject(includeInstance, f),
    commitment: (f = msg.getCommitment()) && proto.external.CompressedRistretto.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.ReducedTxOut}
 */
proto.external.ReducedTxOut.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.external.ReducedTxOut;
  return proto.external.ReducedTxOut.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.ReducedTxOut} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.ReducedTxOut}
 */
proto.external.ReducedTxOut.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.external.CompressedRistretto;
      reader.readMessage(value,proto.external.CompressedRistretto.deserializeBinaryFromReader);
      msg.setPublicKey(value);
      break;
    case 2:
      var value = new proto.external.CompressedRistretto;
      reader.readMessage(value,proto.external.CompressedRistretto.deserializeBinaryFromReader);
      msg.setTargetKey(value);
      break;
    case 3:
      var value = new proto.external.CompressedRistretto;
      reader.readMessage(value,proto.external.CompressedRistretto.deserializeBinaryFromReader);
      msg.setCommitment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.ReducedTxOut.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.external.ReducedTxOut.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.ReducedTxOut} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.ReducedTxOut.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublicKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.external.CompressedRistretto.serializeBinaryToWriter
    );
  }
  f = message.getTargetKey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.external.CompressedRistretto.serializeBinaryToWriter
    );
  }
  f = message.getCommitment();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.external.CompressedRistretto.serializeBinaryToWriter
    );
  }
};


/**
 * optional CompressedRistretto public_key = 1;
 * @return {?proto.external.CompressedRistretto}
 */
proto.external.ReducedTxOut.prototype.getPublicKey = function() {
  return /** @type{?proto.external.CompressedRistretto} */ (
    jspb.Message.getWrapperField(this, proto.external.CompressedRistretto, 1));
};


/**
 * @param {?proto.external.CompressedRistretto|undefined} value
 * @return {!proto.external.ReducedTxOut} returns this
*/
proto.external.ReducedTxOut.prototype.setPublicKey = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.ReducedTxOut} returns this
 */
proto.external.ReducedTxOut.prototype.clearPublicKey = function() {
  return this.setPublicKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.ReducedTxOut.prototype.hasPublicKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CompressedRistretto target_key = 2;
 * @return {?proto.external.CompressedRistretto}
 */
proto.external.ReducedTxOut.prototype.getTargetKey = function() {
  return /** @type{?proto.external.CompressedRistretto} */ (
    jspb.Message.getWrapperField(this, proto.external.CompressedRistretto, 2));
};


/**
 * @param {?proto.external.CompressedRistretto|undefined} value
 * @return {!proto.external.ReducedTxOut} returns this
*/
proto.external.ReducedTxOut.prototype.setTargetKey = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.ReducedTxOut} returns this
 */
proto.external.ReducedTxOut.prototype.clearTargetKey = function() {
  return this.setTargetKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.ReducedTxOut.prototype.hasTargetKey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CompressedRistretto commitment = 3;
 * @return {?proto.external.CompressedRistretto}
 */
proto.external.ReducedTxOut.prototype.getCommitment = function() {
  return /** @type{?proto.external.CompressedRistretto} */ (
    jspb.Message.getWrapperField(this, proto.external.CompressedRistretto, 3));
};


/**
 * @param {?proto.external.CompressedRistretto|undefined} value
 * @return {!proto.external.ReducedTxOut} returns this
*/
proto.external.ReducedTxOut.prototype.setCommitment = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.ReducedTxOut} returns this
 */
proto.external.ReducedTxOut.prototype.clearCommitment = function() {
  return this.setCommitment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.ReducedTxOut.prototype.hasCommitment = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.external.SignableInputRing.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.external.SignableInputRing.prototype.toObject = function(opt_includeInstance) {
  return proto.external.SignableInputRing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.external.SignableInputRing} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.SignableInputRing.toObject = function(includeInstance, msg) {
  var f, obj = {
    membersList: jspb.Message.toObjectList(msg.getMembersList(),
    proto.external.ReducedTxOut.toObject, includeInstance),
    realInputIndex: jspb.Message.getFieldWithDefault(msg, 2, 0),
    inputSecret: (f = msg.getInputSecret()) && proto.external.InputSecret.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.SignableInputRing}
 */
proto.external.SignableInputRing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.external.SignableInputRing;
  return proto.external.SignableInputRing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.SignableInputRing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.SignableInputRing}
 */
proto.external.SignableInputRing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.external.ReducedTxOut;
      reader.readMessage(value,proto.external.ReducedTxOut.deserializeBinaryFromReader);
      msg.addMembers(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRealInputIndex(value);
      break;
    case 3:
      var value = new proto.external.InputSecret;
      reader.readMessage(value,proto.external.InputSecret.deserializeBinaryFromReader);
      msg.setInputSecret(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.SignableInputRing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.external.SignableInputRing.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.SignableInputRing} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.SignableInputRing.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMembersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.external.ReducedTxOut.serializeBinaryToWriter
    );
  }
  f = message.getRealInputIndex();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getInputSecret();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.external.InputSecret.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ReducedTxOut members = 1;
 * @return {!Array<!proto.external.ReducedTxOut>}
 */
proto.external.SignableInputRing.prototype.getMembersList = function() {
  return /** @type{!Array<!proto.external.ReducedTxOut>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.external.ReducedTxOut, 1));
};


/**
 * @param {!Array<!proto.external.ReducedTxOut>} value
 * @return {!proto.external.SignableInputRing} returns this
*/
proto.external.SignableInputRing.prototype.setMembersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.external.ReducedTxOut=} opt_value
 * @param {number=} opt_index
 * @return {!proto.external.ReducedTxOut}
 */
proto.external.SignableInputRing.prototype.addMembers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.external.ReducedTxOut, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.external.SignableInputRing} returns this
 */
proto.external.SignableInputRing.prototype.clearMembersList = function() {
  return this.setMembersList([]);
};


/**
 * optional uint32 real_input_index = 2;
 * @return {number}
 */
proto.external.SignableInputRing.prototype.getRealInputIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.external.SignableInputRing} returns this
 */
proto.external.SignableInputRing.prototype.setRealInputIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional InputSecret input_secret = 3;
 * @return {?proto.external.InputSecret}
 */
proto.external.SignableInputRing.prototype.getInputSecret = function() {
  return /** @type{?proto.external.InputSecret} */ (
    jspb.Message.getWrapperField(this, proto.external.InputSecret, 3));
};


/**
 * @param {?proto.external.InputSecret|undefined} value
 * @return {!proto.external.SignableInputRing} returns this
*/
proto.external.SignableInputRing.prototype.setInputSecret = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.SignableInputRing} returns this
 */
proto.external.SignableInputRing.prototype.clearInputSecret = function() {
  return this.setInputSecret(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.SignableInputRing.prototype.hasInputSecret = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.external.PresignedInputRing.prototype.toObject = function(opt_includeInstance) {
  return proto.external.PresignedInputRing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.external.PresignedInputRing} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.PresignedInputRing.toObject = function(includeInstance, msg) {
  var f, obj = {
    mlsag: (f = msg.getMlsag()) && proto.external.RingMLSAG.toObject(includeInstance, f),
    pseudoOutputSecret: (f = msg.getPseudoOutputSecret()) && proto.external.OutputSecret.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.PresignedInputRing}
 */
proto.external.PresignedInputRing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.external.PresignedInputRing;
  return proto.external.PresignedInputRing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.PresignedInputRing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.PresignedInputRing}
 */
proto.external.PresignedInputRing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.external.RingMLSAG;
      reader.readMessage(value,proto.external.RingMLSAG.deserializeBinaryFromReader);
      msg.setMlsag(value);
      break;
    case 2:
      var value = new proto.external.OutputSecret;
      reader.readMessage(value,proto.external.OutputSecret.deserializeBinaryFromReader);
      msg.setPseudoOutputSecret(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.PresignedInputRing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.external.PresignedInputRing.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.PresignedInputRing} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.PresignedInputRing.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMlsag();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.external.RingMLSAG.serializeBinaryToWriter
    );
  }
  f = message.getPseudoOutputSecret();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.external.OutputSecret.serializeBinaryToWriter
    );
  }
};


/**
 * optional RingMLSAG mlsag = 1;
 * @return {?proto.external.RingMLSAG}
 */
proto.external.PresignedInputRing.prototype.getMlsag = function() {
  return /** @type{?proto.external.RingMLSAG} */ (
    jspb.Message.getWrapperField(this, proto.external.RingMLSAG, 1));
};


/**
 * @param {?proto.external.RingMLSAG|undefined} value
 * @return {!proto.external.PresignedInputRing} returns this
*/
proto.external.PresignedInputRing.prototype.setMlsag = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.PresignedInputRing} returns this
 */
proto.external.PresignedInputRing.prototype.clearMlsag = function() {
  return this.setMlsag(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.PresignedInputRing.prototype.hasMlsag = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional OutputSecret pseudo_output_secret = 2;
 * @return {?proto.external.OutputSecret}
 */
proto.external.PresignedInputRing.prototype.getPseudoOutputSecret = function() {
  return /** @type{?proto.external.OutputSecret} */ (
    jspb.Message.getWrapperField(this, proto.external.OutputSecret, 2));
};


/**
 * @param {?proto.external.OutputSecret|undefined} value
 * @return {!proto.external.PresignedInputRing} returns this
*/
proto.external.PresignedInputRing.prototype.setPseudoOutputSecret = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.PresignedInputRing} returns this
 */
proto.external.PresignedInputRing.prototype.clearPseudoOutputSecret = function() {
  return this.setPseudoOutputSecret(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.PresignedInputRing.prototype.hasPseudoOutputSecret = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.external.InputRing.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.external.InputRing.RingCase = {
  RING_NOT_SET: 0,
  SIGNABLE: 1,
  PRESIGNED: 2
};

/**
 * @return {proto.external.InputRing.RingCase}
 */
proto.external.InputRing.prototype.getRingCase = function() {
  return /** @type {proto.external.InputRing.RingCase} */(jspb.Message.computeOneofCase(this, proto.external.InputRing.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.external.InputRing.prototype.toObject = function(opt_includeInstance) {
  return proto.external.InputRing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.external.InputRing} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.InputRing.toObject = function(includeInstance, msg) {
  var f, obj = {
    signable: (f = msg.getSignable()) && proto.external.SignableInputRing.toObject(includeInstance, f),
    presigned: (f = msg.getPresigned()) && proto.external.PresignedInputRing.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.InputRing}
 */
proto.external.InputRing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.external.InputRing;
  return proto.external.InputRing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.InputRing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.InputRing}
 */
proto.external.InputRing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.external.SignableInputRing;
      reader.readMessage(value,proto.external.SignableInputRing.deserializeBinaryFromReader);
      msg.setSignable(value);
      break;
    case 2:
      var value = new proto.external.PresignedInputRing;
      reader.readMessage(value,proto.external.PresignedInputRing.deserializeBinaryFromReader);
      msg.setPresigned(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.InputRing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.external.InputRing.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.InputRing} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.InputRing.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignable();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.external.SignableInputRing.serializeBinaryToWriter
    );
  }
  f = message.getPresigned();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.external.PresignedInputRing.serializeBinaryToWriter
    );
  }
};


/**
 * optional SignableInputRing signable = 1;
 * @return {?proto.external.SignableInputRing}
 */
proto.external.InputRing.prototype.getSignable = function() {
  return /** @type{?proto.external.SignableInputRing} */ (
    jspb.Message.getWrapperField(this, proto.external.SignableInputRing, 1));
};


/**
 * @param {?proto.external.SignableInputRing|undefined} value
 * @return {!proto.external.InputRing} returns this
*/
proto.external.InputRing.prototype.setSignable = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.external.InputRing.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.InputRing} returns this
 */
proto.external.InputRing.prototype.clearSignable = function() {
  return this.setSignable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.InputRing.prototype.hasSignable = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PresignedInputRing presigned = 2;
 * @return {?proto.external.PresignedInputRing}
 */
proto.external.InputRing.prototype.getPresigned = function() {
  return /** @type{?proto.external.PresignedInputRing} */ (
    jspb.Message.getWrapperField(this, proto.external.PresignedInputRing, 2));
};


/**
 * @param {?proto.external.PresignedInputRing|undefined} value
 * @return {!proto.external.InputRing} returns this
*/
proto.external.InputRing.prototype.setPresigned = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.external.InputRing.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.InputRing} returns this
 */
proto.external.InputRing.prototype.clearPresigned = function() {
  return this.setPresigned(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.InputRing.prototype.hasPresigned = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.external.UnsignedTx.repeatedFields_ = [2,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.external.UnsignedTx.prototype.toObject = function(opt_includeInstance) {
  return proto.external.UnsignedTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.external.UnsignedTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.UnsignedTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    txPrefix: (f = msg.getTxPrefix()) && proto.external.TxPrefix.toObject(includeInstance, f),
    ringsList: jspb.Message.toObjectList(msg.getRingsList(),
    proto.external.InputRing.toObject, includeInstance),
    blockVersion: jspb.Message.getFieldWithDefault(msg, 4, 0),
    txOutUnblindingDataList: jspb.Message.toObjectList(msg.getTxOutUnblindingDataList(),
    proto.external.TxOutSummaryUnblindingData.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.UnsignedTx}
 */
proto.external.UnsignedTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.external.UnsignedTx;
  return proto.external.UnsignedTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.UnsignedTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.UnsignedTx}
 */
proto.external.UnsignedTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.external.TxPrefix;
      reader.readMessage(value,proto.external.TxPrefix.deserializeBinaryFromReader);
      msg.setTxPrefix(value);
      break;
    case 2:
      var value = new proto.external.InputRing;
      reader.readMessage(value,proto.external.InputRing.deserializeBinaryFromReader);
      msg.addRings(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBlockVersion(value);
      break;
    case 5:
      var value = new proto.external.TxOutSummaryUnblindingData;
      reader.readMessage(value,proto.external.TxOutSummaryUnblindingData.deserializeBinaryFromReader);
      msg.addTxOutUnblindingData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.UnsignedTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.external.UnsignedTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.UnsignedTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.UnsignedTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxPrefix();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.external.TxPrefix.serializeBinaryToWriter
    );
  }
  f = message.getRingsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.external.InputRing.serializeBinaryToWriter
    );
  }
  f = message.getBlockVersion();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getTxOutUnblindingDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.external.TxOutSummaryUnblindingData.serializeBinaryToWriter
    );
  }
};


/**
 * optional TxPrefix tx_prefix = 1;
 * @return {?proto.external.TxPrefix}
 */
proto.external.UnsignedTx.prototype.getTxPrefix = function() {
  return /** @type{?proto.external.TxPrefix} */ (
    jspb.Message.getWrapperField(this, proto.external.TxPrefix, 1));
};


/**
 * @param {?proto.external.TxPrefix|undefined} value
 * @return {!proto.external.UnsignedTx} returns this
*/
proto.external.UnsignedTx.prototype.setTxPrefix = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.UnsignedTx} returns this
 */
proto.external.UnsignedTx.prototype.clearTxPrefix = function() {
  return this.setTxPrefix(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.UnsignedTx.prototype.hasTxPrefix = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated InputRing rings = 2;
 * @return {!Array<!proto.external.InputRing>}
 */
proto.external.UnsignedTx.prototype.getRingsList = function() {
  return /** @type{!Array<!proto.external.InputRing>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.external.InputRing, 2));
};


/**
 * @param {!Array<!proto.external.InputRing>} value
 * @return {!proto.external.UnsignedTx} returns this
*/
proto.external.UnsignedTx.prototype.setRingsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.external.InputRing=} opt_value
 * @param {number=} opt_index
 * @return {!proto.external.InputRing}
 */
proto.external.UnsignedTx.prototype.addRings = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.external.InputRing, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.external.UnsignedTx} returns this
 */
proto.external.UnsignedTx.prototype.clearRingsList = function() {
  return this.setRingsList([]);
};


/**
 * optional uint32 block_version = 4;
 * @return {number}
 */
proto.external.UnsignedTx.prototype.getBlockVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.external.UnsignedTx} returns this
 */
proto.external.UnsignedTx.prototype.setBlockVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated TxOutSummaryUnblindingData tx_out_unblinding_data = 5;
 * @return {!Array<!proto.external.TxOutSummaryUnblindingData>}
 */
proto.external.UnsignedTx.prototype.getTxOutUnblindingDataList = function() {
  return /** @type{!Array<!proto.external.TxOutSummaryUnblindingData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.external.TxOutSummaryUnblindingData, 5));
};


/**
 * @param {!Array<!proto.external.TxOutSummaryUnblindingData>} value
 * @return {!proto.external.UnsignedTx} returns this
*/
proto.external.UnsignedTx.prototype.setTxOutUnblindingDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.external.TxOutSummaryUnblindingData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.external.TxOutSummaryUnblindingData}
 */
proto.external.UnsignedTx.prototype.addTxOutUnblindingData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.external.TxOutSummaryUnblindingData, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.external.UnsignedTx} returns this
 */
proto.external.UnsignedTx.prototype.clearTxOutUnblindingDataList = function() {
  return this.setTxOutUnblindingDataList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.external.TxOutSummaryUnblindingData.prototype.toObject = function(opt_includeInstance) {
  return proto.external.TxOutSummaryUnblindingData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.external.TxOutSummaryUnblindingData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.TxOutSummaryUnblindingData.toObject = function(includeInstance, msg) {
  var f, obj = {
    unmaskedAmount: (f = msg.getUnmaskedAmount()) && proto.external.UnmaskedAmount.toObject(includeInstance, f),
    address: (f = msg.getAddress()) && proto.external.PublicAddress.toObject(includeInstance, f),
    txPrivateKey: (f = msg.getTxPrivateKey()) && proto.external.RistrettoPrivate.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.TxOutSummaryUnblindingData}
 */
proto.external.TxOutSummaryUnblindingData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.external.TxOutSummaryUnblindingData;
  return proto.external.TxOutSummaryUnblindingData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.TxOutSummaryUnblindingData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.TxOutSummaryUnblindingData}
 */
proto.external.TxOutSummaryUnblindingData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.external.UnmaskedAmount;
      reader.readMessage(value,proto.external.UnmaskedAmount.deserializeBinaryFromReader);
      msg.setUnmaskedAmount(value);
      break;
    case 2:
      var value = new proto.external.PublicAddress;
      reader.readMessage(value,proto.external.PublicAddress.deserializeBinaryFromReader);
      msg.setAddress(value);
      break;
    case 3:
      var value = new proto.external.RistrettoPrivate;
      reader.readMessage(value,proto.external.RistrettoPrivate.deserializeBinaryFromReader);
      msg.setTxPrivateKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.TxOutSummaryUnblindingData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.external.TxOutSummaryUnblindingData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.TxOutSummaryUnblindingData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.TxOutSummaryUnblindingData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnmaskedAmount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.external.UnmaskedAmount.serializeBinaryToWriter
    );
  }
  f = message.getAddress();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.external.PublicAddress.serializeBinaryToWriter
    );
  }
  f = message.getTxPrivateKey();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.external.RistrettoPrivate.serializeBinaryToWriter
    );
  }
};


/**
 * optional UnmaskedAmount unmasked_amount = 1;
 * @return {?proto.external.UnmaskedAmount}
 */
proto.external.TxOutSummaryUnblindingData.prototype.getUnmaskedAmount = function() {
  return /** @type{?proto.external.UnmaskedAmount} */ (
    jspb.Message.getWrapperField(this, proto.external.UnmaskedAmount, 1));
};


/**
 * @param {?proto.external.UnmaskedAmount|undefined} value
 * @return {!proto.external.TxOutSummaryUnblindingData} returns this
*/
proto.external.TxOutSummaryUnblindingData.prototype.setUnmaskedAmount = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.TxOutSummaryUnblindingData} returns this
 */
proto.external.TxOutSummaryUnblindingData.prototype.clearUnmaskedAmount = function() {
  return this.setUnmaskedAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.TxOutSummaryUnblindingData.prototype.hasUnmaskedAmount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PublicAddress address = 2;
 * @return {?proto.external.PublicAddress}
 */
proto.external.TxOutSummaryUnblindingData.prototype.getAddress = function() {
  return /** @type{?proto.external.PublicAddress} */ (
    jspb.Message.getWrapperField(this, proto.external.PublicAddress, 2));
};


/**
 * @param {?proto.external.PublicAddress|undefined} value
 * @return {!proto.external.TxOutSummaryUnblindingData} returns this
*/
proto.external.TxOutSummaryUnblindingData.prototype.setAddress = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.TxOutSummaryUnblindingData} returns this
 */
proto.external.TxOutSummaryUnblindingData.prototype.clearAddress = function() {
  return this.setAddress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.TxOutSummaryUnblindingData.prototype.hasAddress = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RistrettoPrivate tx_private_key = 3;
 * @return {?proto.external.RistrettoPrivate}
 */
proto.external.TxOutSummaryUnblindingData.prototype.getTxPrivateKey = function() {
  return /** @type{?proto.external.RistrettoPrivate} */ (
    jspb.Message.getWrapperField(this, proto.external.RistrettoPrivate, 3));
};


/**
 * @param {?proto.external.RistrettoPrivate|undefined} value
 * @return {!proto.external.TxOutSummaryUnblindingData} returns this
*/
proto.external.TxOutSummaryUnblindingData.prototype.setTxPrivateKey = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.external.TxOutSummaryUnblindingData} returns this
 */
proto.external.TxOutSummaryUnblindingData.prototype.clearTxPrivateKey = function() {
  return this.setTxPrivateKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.external.TxOutSummaryUnblindingData.prototype.hasTxPrivateKey = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.external.SigningData.repeatedFields_ = [2,3,5,6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.external.SigningData.prototype.toObject = function(opt_includeInstance) {
  return proto.external.SigningData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.external.SigningData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.SigningData.toObject = function(includeInstance, msg) {
  var f, obj = {
    mlsagSigningDigest: msg.getMlsagSigningDigest_asB64(),
    pseudoOutputBlindingsList: jspb.Message.toObjectList(msg.getPseudoOutputBlindingsList(),
    proto.external.CurveScalar.toObject, includeInstance),
    pseudoOutputCommitmentsList: jspb.Message.toObjectList(msg.getPseudoOutputCommitmentsList(),
    proto.external.CompressedRistretto.toObject, includeInstance),
    rangeProofBytes: msg.getRangeProofBytes_asB64(),
    rangeProofsList: msg.getRangeProofsList_asB64(),
    pseudoOutputTokenIdsList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    outputTokenIdsList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.external.SigningData}
 */
proto.external.SigningData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.external.SigningData;
  return proto.external.SigningData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.external.SigningData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.external.SigningData}
 */
proto.external.SigningData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMlsagSigningDigest(value);
      break;
    case 2:
      var value = new proto.external.CurveScalar;
      reader.readMessage(value,proto.external.CurveScalar.deserializeBinaryFromReader);
      msg.addPseudoOutputBlindings(value);
      break;
    case 3:
      var value = new proto.external.CompressedRistretto;
      reader.readMessage(value,proto.external.CompressedRistretto.deserializeBinaryFromReader);
      msg.addPseudoOutputCommitments(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRangeProofBytes(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addRangeProofs(value);
      break;
    case 6:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFixed64() : [reader.readFixed64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addPseudoOutputTokenIds(values[i]);
      }
      break;
    case 7:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFixed64() : [reader.readFixed64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addOutputTokenIds(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.external.SigningData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.external.SigningData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.external.SigningData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.external.SigningData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMlsagSigningDigest_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPseudoOutputBlindingsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.external.CurveScalar.serializeBinaryToWriter
    );
  }
  f = message.getPseudoOutputCommitmentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.external.CompressedRistretto.serializeBinaryToWriter
    );
  }
  f = message.getRangeProofBytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getRangeProofsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      5,
      f
    );
  }
  f = message.getPseudoOutputTokenIdsList();
  if (f.length > 0) {
    writer.writePackedFixed64(
      6,
      f
    );
  }
  f = message.getOutputTokenIdsList();
  if (f.length > 0) {
    writer.writePackedFixed64(
      7,
      f
    );
  }
};


/**
 * optional bytes mlsag_signing_digest = 1;
 * @return {!(string|Uint8Array)}
 */
proto.external.SigningData.prototype.getMlsagSigningDigest = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes mlsag_signing_digest = 1;
 * This is a type-conversion wrapper around `getMlsagSigningDigest()`
 * @return {string}
 */
proto.external.SigningData.prototype.getMlsagSigningDigest_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMlsagSigningDigest()));
};


/**
 * optional bytes mlsag_signing_digest = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMlsagSigningDigest()`
 * @return {!Uint8Array}
 */
proto.external.SigningData.prototype.getMlsagSigningDigest_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMlsagSigningDigest()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.external.SigningData} returns this
 */
proto.external.SigningData.prototype.setMlsagSigningDigest = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated CurveScalar pseudo_output_blindings = 2;
 * @return {!Array<!proto.external.CurveScalar>}
 */
proto.external.SigningData.prototype.getPseudoOutputBlindingsList = function() {
  return /** @type{!Array<!proto.external.CurveScalar>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.external.CurveScalar, 2));
};


/**
 * @param {!Array<!proto.external.CurveScalar>} value
 * @return {!proto.external.SigningData} returns this
*/
proto.external.SigningData.prototype.setPseudoOutputBlindingsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.external.CurveScalar=} opt_value
 * @param {number=} opt_index
 * @return {!proto.external.CurveScalar}
 */
proto.external.SigningData.prototype.addPseudoOutputBlindings = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.external.CurveScalar, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.external.SigningData} returns this
 */
proto.external.SigningData.prototype.clearPseudoOutputBlindingsList = function() {
  return this.setPseudoOutputBlindingsList([]);
};


/**
 * repeated CompressedRistretto pseudo_output_commitments = 3;
 * @return {!Array<!proto.external.CompressedRistretto>}
 */
proto.external.SigningData.prototype.getPseudoOutputCommitmentsList = function() {
  return /** @type{!Array<!proto.external.CompressedRistretto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.external.CompressedRistretto, 3));
};


/**
 * @param {!Array<!proto.external.CompressedRistretto>} value
 * @return {!proto.external.SigningData} returns this
*/
proto.external.SigningData.prototype.setPseudoOutputCommitmentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.external.CompressedRistretto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.external.CompressedRistretto}
 */
proto.external.SigningData.prototype.addPseudoOutputCommitments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.external.CompressedRistretto, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.external.SigningData} returns this
 */
proto.external.SigningData.prototype.clearPseudoOutputCommitmentsList = function() {
  return this.setPseudoOutputCommitmentsList([]);
};


/**
 * optional bytes range_proof_bytes = 4;
 * @return {!(string|Uint8Array)}
 */
proto.external.SigningData.prototype.getRangeProofBytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes range_proof_bytes = 4;
 * This is a type-conversion wrapper around `getRangeProofBytes()`
 * @return {string}
 */
proto.external.SigningData.prototype.getRangeProofBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRangeProofBytes()));
};


/**
 * optional bytes range_proof_bytes = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRangeProofBytes()`
 * @return {!Uint8Array}
 */
proto.external.SigningData.prototype.getRangeProofBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRangeProofBytes()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.external.SigningData} returns this
 */
proto.external.SigningData.prototype.setRangeProofBytes = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * repeated bytes range_proofs = 5;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.external.SigningData.prototype.getRangeProofsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * repeated bytes range_proofs = 5;
 * This is a type-conversion wrapper around `getRangeProofsList()`
 * @return {!Array<string>}
 */
proto.external.SigningData.prototype.getRangeProofsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getRangeProofsList()));
};


/**
 * repeated bytes range_proofs = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRangeProofsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.external.SigningData.prototype.getRangeProofsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getRangeProofsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.external.SigningData} returns this
 */
proto.external.SigningData.prototype.setRangeProofsList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.external.SigningData} returns this
 */
proto.external.SigningData.prototype.addRangeProofs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.external.SigningData} returns this
 */
proto.external.SigningData.prototype.clearRangeProofsList = function() {
  return this.setRangeProofsList([]);
};


/**
 * repeated fixed64 pseudo_output_token_ids = 6;
 * @return {!Array<number>}
 */
proto.external.SigningData.prototype.getPseudoOutputTokenIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.external.SigningData} returns this
 */
proto.external.SigningData.prototype.setPseudoOutputTokenIdsList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.external.SigningData} returns this
 */
proto.external.SigningData.prototype.addPseudoOutputTokenIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.external.SigningData} returns this
 */
proto.external.SigningData.prototype.clearPseudoOutputTokenIdsList = function() {
  return this.setPseudoOutputTokenIdsList([]);
};


/**
 * repeated fixed64 output_token_ids = 7;
 * @return {!Array<number>}
 */
proto.external.SigningData.prototype.getOutputTokenIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.external.SigningData} returns this
 */
proto.external.SigningData.prototype.setOutputTokenIdsList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.external.SigningData} returns this
 */
proto.external.SigningData.prototype.addOutputTokenIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.external.SigningData} returns this
 */
proto.external.SigningData.prototype.clearOutputTokenIdsList = function() {
  return this.setOutputTokenIdsList([]);
};


/**
 * @enum {number}
 */
proto.external.KnownTokenId = {
  MOB: 0
};

goog.object.extend(exports, proto.external);
