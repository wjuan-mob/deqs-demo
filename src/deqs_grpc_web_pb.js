/**
 * @fileoverview gRPC-Web generated client stub for deqs
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v3.12.4
// source: src/deqs.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var src_external_pb = require('../src/external_pb.js')
const proto = {};
proto.deqs = require('./deqs_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.deqs.DeqsClientAPIClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.deqs.DeqsClientAPIPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.deqs.SubmitQuotesRequest,
 *   !proto.deqs.SubmitQuotesResponse>}
 */
const methodDescriptor_DeqsClientAPI_SubmitQuotes = new grpc.web.MethodDescriptor(
  '/deqs.DeqsClientAPI/SubmitQuotes',
  grpc.web.MethodType.UNARY,
  proto.deqs.SubmitQuotesRequest,
  proto.deqs.SubmitQuotesResponse,
  /**
   * @param {!proto.deqs.SubmitQuotesRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.deqs.SubmitQuotesResponse.deserializeBinary
);


/**
 * @param {!proto.deqs.SubmitQuotesRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.deqs.SubmitQuotesResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.deqs.SubmitQuotesResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.deqs.DeqsClientAPIClient.prototype.submitQuotes =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/deqs.DeqsClientAPI/SubmitQuotes',
      request,
      metadata || {},
      methodDescriptor_DeqsClientAPI_SubmitQuotes,
      callback);
};


/**
 * @param {!proto.deqs.SubmitQuotesRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.deqs.SubmitQuotesResponse>}
 *     Promise that resolves to the response
 */
proto.deqs.DeqsClientAPIPromiseClient.prototype.submitQuotes =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/deqs.DeqsClientAPI/SubmitQuotes',
      request,
      metadata || {},
      methodDescriptor_DeqsClientAPI_SubmitQuotes);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.deqs.GetQuotesRequest,
 *   !proto.deqs.GetQuotesResponse>}
 */
const methodDescriptor_DeqsClientAPI_GetQuotes = new grpc.web.MethodDescriptor(
  '/deqs.DeqsClientAPI/GetQuotes',
  grpc.web.MethodType.UNARY,
  proto.deqs.GetQuotesRequest,
  proto.deqs.GetQuotesResponse,
  /**
   * @param {!proto.deqs.GetQuotesRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.deqs.GetQuotesResponse.deserializeBinary
);


/**
 * @param {!proto.deqs.GetQuotesRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.deqs.GetQuotesResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.deqs.GetQuotesResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.deqs.DeqsClientAPIClient.prototype.getQuotes =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/deqs.DeqsClientAPI/GetQuotes',
      request,
      metadata || {},
      methodDescriptor_DeqsClientAPI_GetQuotes,
      callback);
};


/**
 * @param {!proto.deqs.GetQuotesRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.deqs.GetQuotesResponse>}
 *     Promise that resolves to the response
 */
proto.deqs.DeqsClientAPIPromiseClient.prototype.getQuotes =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/deqs.DeqsClientAPI/GetQuotes',
      request,
      metadata || {},
      methodDescriptor_DeqsClientAPI_GetQuotes);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.deqs.LiveUpdatesRequest,
 *   !proto.deqs.LiveUpdate>}
 */
const methodDescriptor_DeqsClientAPI_LiveUpdates = new grpc.web.MethodDescriptor(
  '/deqs.DeqsClientAPI/LiveUpdates',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.deqs.LiveUpdatesRequest,
  proto.deqs.LiveUpdate,
  /**
   * @param {!proto.deqs.LiveUpdatesRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.deqs.LiveUpdate.deserializeBinary
);


/**
 * @param {!proto.deqs.LiveUpdatesRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.deqs.LiveUpdate>}
 *     The XHR Node Readable Stream
 */
proto.deqs.DeqsClientAPIClient.prototype.liveUpdates =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/deqs.DeqsClientAPI/LiveUpdates',
      request,
      metadata || {},
      methodDescriptor_DeqsClientAPI_LiveUpdates);
};


/**
 * @param {!proto.deqs.LiveUpdatesRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.deqs.LiveUpdate>}
 *     The XHR Node Readable Stream
 */
proto.deqs.DeqsClientAPIPromiseClient.prototype.liveUpdates =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/deqs.DeqsClientAPI/LiveUpdates',
      request,
      metadata || {},
      methodDescriptor_DeqsClientAPI_LiveUpdates);
};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.deqs.PingPongClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.deqs.PingPongPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.deqs.PingRequest,
 *   !proto.deqs.PongResponse>}
 */
const methodDescriptor_PingPong_Ping = new grpc.web.MethodDescriptor(
  '/deqs.PingPong/Ping',
  grpc.web.MethodType.UNARY,
  proto.deqs.PingRequest,
  proto.deqs.PongResponse,
  /**
   * @param {!proto.deqs.PingRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.deqs.PongResponse.deserializeBinary
);


/**
 * @param {!proto.deqs.PingRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.deqs.PongResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.deqs.PongResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.deqs.PingPongClient.prototype.ping =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/deqs.PingPong/Ping',
      request,
      metadata || {},
      methodDescriptor_PingPong_Ping,
      callback);
};


/**
 * @param {!proto.deqs.PingRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.deqs.PongResponse>}
 *     Promise that resolves to the response
 */
proto.deqs.PingPongPromiseClient.prototype.ping =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/deqs.PingPong/Ping',
      request,
      metadata || {},
      methodDescriptor_PingPong_Ping);
};


module.exports = proto.deqs;

